# PySNMP SMI module. Autogenerated from smidump -f python HUAWEI-IMA-MIB
# by libsmi2pysnmp-0.1.3 at Thu Jun 30 14:49:54 2016,
# Python version sys.version_info(major=2, minor=7, micro=10, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( hwDatacomm, ) = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
( InterfaceIndex, InterfaceIndexOrZero, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
( DateAndTime, RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "TextualConvention")

# Types

class ImaFrameLength(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,4,3,1,)
    namedValues = NamedValues(("m32", 1), ("m64", 2), ("m128", 3), ("m256", 4), )
    
class ImaGroupState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,1,3,4,6,8,2,9,10,7,)
    namedValues = NamedValues(("notConfigured", 1), ("configAbortUnsupportedImaVersion", 10), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), )
    
class ImaGroupSymmetry(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,1,2,)
    namedValues = NamedValues(("symmetricOperation", 1), ("asymmetricOperation", 2), ("asymmetricConfiguration", 3), )
    
class ImaLinkState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,7,2,3,8,1,5,4,)
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8), )
    
class MilliSeconds(Integer32):
    pass


# Objects

hwImaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176)).setRevisions(("2009-02-10 14:00",))
if mibBuilder.loadTexts: hwImaMIB.setOrganization("Huawei Technologies co.,Ltd.")
if mibBuilder.loadTexts: hwImaMIB.setContactInfo("Huawei Technologies co.,Ltd.\nHuawei Bld.,NO.3 Xinxi Rd., \nShang-Di Information Industry Base,\nHai-Dian District Beijing P.R. China\nhttp://www.huawei.com\nZip:100085")
if mibBuilder.loadTexts: hwImaMIB.setDescription("The MIB is mainly used to configure Inverse Multiplexing\nfor ATM (IMA) interfaces.")
hwImaMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1))
hwImaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1))
if mibBuilder.loadTexts: hwImaGroupTable.setDescription("The IMA Group Configuration table.")
hwImaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1)).setIndexNames((0, "HUAWEI-IMA-MIB", "hwImaGroupIfIndex"))
if mibBuilder.loadTexts: hwImaGroupEntry.setDescription("An entry in the IMA Group table.")
hwImaGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupIfIndex.setDescription("This object identifies the logical interface number ('ifIndex')\nassigned to this IMA group, and is used to identify corresponding\nrows in the Interfaces MIB.\nNote that re-initialization of the management agent may cause\na client's 'hwImaGroupIfIndex' to change.")
hwImaGroupNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 2), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupNeState.setDescription("The current operational state of the near-end IMA Group State\nMachine.")
hwImaGroupFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 3), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupFeState.setDescription("The current operational state of the far-end IMA Group State\nMachine.")
hwImaGroupSymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 4), ImaGroupSymmetry()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupSymmetry.setDescription("Symmetry of the IMA group.")
hwImaGroupMinNumTxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupMinNumTxLinks.setDescription("Minimum number of transmit links required to be Active for\nthe IMA group to be in the Operational state.")
hwImaGroupMinNumRxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupMinNumRxLinks.setDescription("Minimum number of receive links required to be Active for\nthe IMA group to be in the Operational state.")
hwImaGroupTxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupTxTimingRefLink.setDescription("The ifIndex of the transmit timing reference link to be\nused by the near-end for IMA data cell clock recovery from\nthe ATM layer. The distinguished value of zero may be used\nif no link has been configured in the IMA group, or if the\ntransmit timing reference link has not yet been selected.")
hwImaGroupRxTimingRefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxTimingRefLink.setDescription("The ifIndex of the receive timing reference link to be\nused by near-end for IMA data cell clock recovery toward\nthe ATM layer. The distinguished value of zero may be used\nif no link has been configured in the IMA group, or if the\nreceive timing reference link has not yet been detected.")
hwImaGroupTxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupTxImaId.setDescription("The IMA ID currently in use by the near-end IMA function.")
hwImaGroupRxImaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxImaId.setDescription("The IMA ID currently in use by the far-end IMA function.")
hwImaGroupTxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 11), ImaFrameLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupTxFrameLength.setDescription("The frame length to be used by the IMA group in the transmit\ndirection. Can only be set when the IMA group is startup.")
hwImaGroupRxFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 12), ImaFrameLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxFrameLength.setDescription("Value of IMA frame length as received from remote IMA function.")
hwImaGroupDiffDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 13), MilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(25, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaGroupDiffDelayMax.setDescription("The maximum number of milliseconds of differential delay among\nthe links that will be tolerated on this interface.")
hwImaGroupAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupAlphaValue.setDescription("This indicates the 'alpha' value used to specify the number\nof consecutive invalid ICP cells to be detected before moving\nto the IMA Hunt state from the IMA Sync state.")
hwImaGroupBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupBetaValue.setDescription("This indicates the 'beta' value used to specify the number\nof consecutive errored ICP cells to be detected before moving\nto the IMA Hunt state from the IMA Sync state.")
hwImaGroupGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupGammaValue.setDescription("This indicates the 'gamma' value used to specify the number\nof consecutive valid ICP cells to be detected before moving\nto the IMA Sync state from the IMA PreSync state.")
hwImaGroupNumTxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupNumTxActLinks.setDescription("The number of links which are configured to transmit and are\ncurrently Active in this IMA group.")
hwImaGroupNumRxActLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupNumRxActLinks.setDescription("The number of links which are configured to receive and are\ncurrently Active in this IMA group.")
hwImaGroupTxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupTxOamLabelValue.setDescription("IMA OAM Label value transmitted by the NE IMA unit.")
hwImaGroupRxOamLabelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupRxOamLabelValue.setDescription("IMA OAM Label value transmitted by the FE IMA unit. The value 0\nlikely means that the IMA unit has not received an OAM Label\nfrom the FE IMA unit at this time.")
hwImaGroupFirstLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 21), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaGroupFirstLinkIfIndex.setDescription("This object identifies the first link of this IMA Group.")
hwImaGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 1, 1, 22), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: hwImaGroupName.setDescription("The name of interface ImaGroup.")
hwImaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2))
if mibBuilder.loadTexts: hwImaLinkTable.setDescription("The IMA group Link Status and Configuration table.")
hwImaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1)).setIndexNames((0, "HUAWEI-IMA-MIB", "hwImaLinkIfIndex"))
if mibBuilder.loadTexts: hwImaLinkEntry.setDescription("An entry in the IMA Group Link table.")
hwImaLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwImaLinkIfIndex.setDescription("This corresponds to the 'ifIndex' of the MIB-II interface\non which this link is established. This object also\ncorresponds to the logical number ('ifIndex') assigned to\nthis IMA link.")
hwImaLinkGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaLinkGroupIfIndex.setDescription("This object identifies the logical interface number ('ifIndex')\nassigned to this IMA group. The specified link will be bound to\nthis IMA group.")
hwImaLinkNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 3), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkNeTxState.setDescription("The current state of the near-end transmit link.")
hwImaLinkNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 4), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkNeRxState.setDescription("The current state of the near-end receive link.")
hwImaLinkFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 5), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkFeTxState.setDescription("The current state of the far-end transmit link as reported\nvia ICP cells.")
hwImaLinkFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 6), ImaLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwImaLinkFeRxState.setDescription("The current state of the far-end receive link as reported\nvia ICP cells.")
hwImaLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwImaLinkRowStatus.setDescription("The hwImaLinkRowStatus object allows create, change, and delete\noperations on hwImaLinkTable entries.\nTo create a new conceptual row (or instance) of the hwImaLinkTable,\nhwImaLinkRowStatus must be set to 'createAndWait' or 'createAndGo'.\nA successful set of the imaLinkGroupIndex object must be performed\nbefore the hwImaLinkRowStatus of a new conceptual row can be set to\n'active'.\nTo change (modify) the imaLinkGroupIndex in an hwImaLinkTable entry,\nthe hwImaLinkRowStatus object must first be set to 'notInService'.\nOnly then can this object in the conceptual row be modified.\nThis is due to the fact that the imaLinkGroupIndex object provides\nthe association between a physical IMA link and the IMA group to\nwhich it belongs, and setting the imaLinkGroupIndex object to a\ndifferent value has the effect of changing the association between\na physical IMA link and an IMA group. To place the link 'in group',\nthe hwImaLinkRowStatus object is set to 'active'. While the row is\nnot in 'active' state, both the Transmit and Receive IMA link state\nmachines are in the 'Not In Group' state.\nTo remove (delete) an hwImaLinkTable entry from this table, set\nthis object to 'destroy'.")
hwImaLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 2, 1, 52), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: hwImaLinkName.setDescription("Description.")
hwImaAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3))
if mibBuilder.loadTexts: hwImaAlarmTable.setDescription("Description.")
hwImaAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1)).setIndexNames((0, "HUAWEI-IMA-MIB", "hwImaAlarmIfIndex"))
if mibBuilder.loadTexts: hwImaAlarmEntry.setDescription("Description.")
hwImaAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 1), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwImaAlarmIfIndex.setDescription("Description.")
hwImaGroupNeDownEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaGroupNeDownEn.setDescription("Description.")
hwImaGroupFeDownEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaGroupFeDownEn.setDescription("Description.")
hwImaGroupTxClkMismatchEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaGroupTxClkMismatchEn.setDescription("Description.")
hwImaLinkLifEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaLinkLifEn.setDescription("Description.")
hwImaLinkLodsEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaLinkLodsEn.setDescription("Description.")
hwImaLinkRfiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaLinkRfiEn.setDescription("Description.")
hwImaLinkFeTxUnusableEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaLinkFeTxUnusableEn.setDescription("Description.")
hwImaLinkFeRxUnusableEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwImaLinkFeRxUnusableEn.setDescription("Description.")
hwIMAAllEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIMAAllEn.setDescription("Description.")
hwImaMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2))
hwImaMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 1))
hwImaMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 2))
hwImaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3))

# Augmentions

# Notifications

hwImaGroupNeDownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 1)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaGroupName"), ) )
if mibBuilder.loadTexts: hwImaGroupNeDownAlarm.setDescription("Description.")
hwImaGroupNeDownAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 2)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaGroupName"), ) )
if mibBuilder.loadTexts: hwImaGroupNeDownAlarmResume.setDescription("Description.")
hwImaGroupFeDownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 3)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaGroupName"), ) )
if mibBuilder.loadTexts: hwImaGroupFeDownAlarm.setDescription("Description.")
hwImaGroupFeDownAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 4)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaGroupName"), ) )
if mibBuilder.loadTexts: hwImaGroupFeDownAlarmResume.setDescription("Description.")
hwImaGroupTxClkMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 5)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaGroupName"), ) )
if mibBuilder.loadTexts: hwImaGroupTxClkMismatch.setDescription("Description.")
hwImaGroupTxClkMismatchResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 6)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaGroupName"), ) )
if mibBuilder.loadTexts: hwImaGroupTxClkMismatchResume.setDescription("Description.")
hwImaLinkLifAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 7)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkLifAlarm.setDescription("Description.")
hwImaLinkLifAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 8)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkLifAlarmResume.setDescription("Description.")
hwImaLinkLodsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 9)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkLodsAlarm.setDescription("Description.")
hwImaLinkLodsAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 10)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkLodsAlarmResume.setDescription("Description.")
hwImaLinkRfiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 11)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkRfiAlarm.setDescription("Description.")
hwImaLinkRfiAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 12)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkRfiAlarmResume.setDescription("Description.")
hwImaLinkFeTxUnusableAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 13)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkFeTxUnusableAlarm.setDescription("Description.")
hwImaLinkFeTxUnusableAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 14)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkFeTxUnusableAlarmResume.setDescription("Description.")
hwImaLinkFeRxUnusableAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 15)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkFeRxUnusableAlarm.setDescription("Description.")
hwImaLinkFeRxUnusableAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 3, 16)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkName"), ) )
if mibBuilder.loadTexts: hwImaLinkFeRxUnusableAlarmResume.setDescription("Description.")

# Groups

hwImaGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 1, 1)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaGroupNumRxActLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupMinNumRxLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupTxOamLabelValue"), ("HUAWEI-IMA-MIB", "hwImaGroupRxOamLabelValue"), ("HUAWEI-IMA-MIB", "hwImaGroupNeState"), ("HUAWEI-IMA-MIB", "hwImaGroupRxTimingRefLink"), ("HUAWEI-IMA-MIB", "hwImaGroupTxImaId"), ("HUAWEI-IMA-MIB", "hwImaGroupTxTimingRefLink"), ("HUAWEI-IMA-MIB", "hwImaGroupBetaValue"), ("HUAWEI-IMA-MIB", "hwImaGroupGammaValue"), ("HUAWEI-IMA-MIB", "hwImaGroupFeState"), ("HUAWEI-IMA-MIB", "hwImaGroupSymmetry"), ("HUAWEI-IMA-MIB", "hwImaGroupFirstLinkIfIndex"), ("HUAWEI-IMA-MIB", "hwImaGroupAlphaValue"), ("HUAWEI-IMA-MIB", "hwImaGroupIfIndex"), ("HUAWEI-IMA-MIB", "hwImaGroupRxImaId"), ("HUAWEI-IMA-MIB", "hwImaGroupDiffDelayMax"), ("HUAWEI-IMA-MIB", "hwImaGroupTxFrameLength"), ("HUAWEI-IMA-MIB", "hwImaGroupNumTxActLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupMinNumTxLinks"), ("HUAWEI-IMA-MIB", "hwImaGroupRxFrameLength"), ) )
if mibBuilder.loadTexts: hwImaGroupGroup.setDescription("A set of objects providing configuration and status information for\nan IMA group definition.")
hwImaLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 1, 2)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkRowStatus"), ("HUAWEI-IMA-MIB", "hwImaLinkFeTxState"), ("HUAWEI-IMA-MIB", "hwImaLinkGroupIfIndex"), ("HUAWEI-IMA-MIB", "hwImaLinkFeRxState"), ("HUAWEI-IMA-MIB", "hwImaLinkNeTxState"), ("HUAWEI-IMA-MIB", "hwImaLinkNeRxState"), ) )
if mibBuilder.loadTexts: hwImaLinkGroup.setDescription("A set of objects providing status information for an IMA link.")

# Compliances

hwImaMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 176, 2, 2, 1)).setObjects(*(("HUAWEI-IMA-MIB", "hwImaLinkGroup"), ("HUAWEI-IMA-MIB", "hwImaGroupGroup"), ) )
if mibBuilder.loadTexts: hwImaMibCompliance.setDescription("The compliance statement for network elements implementing\nInverse Multiplexing for ATM (IMA) interfaces.")

# Exports

# Module identity
mibBuilder.exportSymbols("HUAWEI-IMA-MIB", PYSNMP_MODULE_ID=hwImaMIB)

# Types
mibBuilder.exportSymbols("HUAWEI-IMA-MIB", ImaFrameLength=ImaFrameLength, ImaGroupState=ImaGroupState, ImaGroupSymmetry=ImaGroupSymmetry, ImaLinkState=ImaLinkState, MilliSeconds=MilliSeconds)

# Objects
mibBuilder.exportSymbols("HUAWEI-IMA-MIB", hwImaMIB=hwImaMIB, hwImaMibObjects=hwImaMibObjects, hwImaGroupTable=hwImaGroupTable, hwImaGroupEntry=hwImaGroupEntry, hwImaGroupIfIndex=hwImaGroupIfIndex, hwImaGroupNeState=hwImaGroupNeState, hwImaGroupFeState=hwImaGroupFeState, hwImaGroupSymmetry=hwImaGroupSymmetry, hwImaGroupMinNumTxLinks=hwImaGroupMinNumTxLinks, hwImaGroupMinNumRxLinks=hwImaGroupMinNumRxLinks, hwImaGroupTxTimingRefLink=hwImaGroupTxTimingRefLink, hwImaGroupRxTimingRefLink=hwImaGroupRxTimingRefLink, hwImaGroupTxImaId=hwImaGroupTxImaId, hwImaGroupRxImaId=hwImaGroupRxImaId, hwImaGroupTxFrameLength=hwImaGroupTxFrameLength, hwImaGroupRxFrameLength=hwImaGroupRxFrameLength, hwImaGroupDiffDelayMax=hwImaGroupDiffDelayMax, hwImaGroupAlphaValue=hwImaGroupAlphaValue, hwImaGroupBetaValue=hwImaGroupBetaValue, hwImaGroupGammaValue=hwImaGroupGammaValue, hwImaGroupNumTxActLinks=hwImaGroupNumTxActLinks, hwImaGroupNumRxActLinks=hwImaGroupNumRxActLinks, hwImaGroupTxOamLabelValue=hwImaGroupTxOamLabelValue, hwImaGroupRxOamLabelValue=hwImaGroupRxOamLabelValue, hwImaGroupFirstLinkIfIndex=hwImaGroupFirstLinkIfIndex, hwImaGroupName=hwImaGroupName, hwImaLinkTable=hwImaLinkTable, hwImaLinkEntry=hwImaLinkEntry, hwImaLinkIfIndex=hwImaLinkIfIndex, hwImaLinkGroupIfIndex=hwImaLinkGroupIfIndex, hwImaLinkNeTxState=hwImaLinkNeTxState, hwImaLinkNeRxState=hwImaLinkNeRxState, hwImaLinkFeTxState=hwImaLinkFeTxState, hwImaLinkFeRxState=hwImaLinkFeRxState, hwImaLinkRowStatus=hwImaLinkRowStatus, hwImaLinkName=hwImaLinkName, hwImaAlarmTable=hwImaAlarmTable, hwImaAlarmEntry=hwImaAlarmEntry, hwImaAlarmIfIndex=hwImaAlarmIfIndex, hwImaGroupNeDownEn=hwImaGroupNeDownEn, hwImaGroupFeDownEn=hwImaGroupFeDownEn, hwImaGroupTxClkMismatchEn=hwImaGroupTxClkMismatchEn, hwImaLinkLifEn=hwImaLinkLifEn, hwImaLinkLodsEn=hwImaLinkLodsEn, hwImaLinkRfiEn=hwImaLinkRfiEn, hwImaLinkFeTxUnusableEn=hwImaLinkFeTxUnusableEn, hwImaLinkFeRxUnusableEn=hwImaLinkFeRxUnusableEn, hwIMAAllEn=hwIMAAllEn, hwImaMibConformance=hwImaMibConformance, hwImaMibGroups=hwImaMibGroups, hwImaMibCompliances=hwImaMibCompliances, hwImaNotifications=hwImaNotifications)

# Notifications
mibBuilder.exportSymbols("HUAWEI-IMA-MIB", hwImaGroupNeDownAlarm=hwImaGroupNeDownAlarm, hwImaGroupNeDownAlarmResume=hwImaGroupNeDownAlarmResume, hwImaGroupFeDownAlarm=hwImaGroupFeDownAlarm, hwImaGroupFeDownAlarmResume=hwImaGroupFeDownAlarmResume, hwImaGroupTxClkMismatch=hwImaGroupTxClkMismatch, hwImaGroupTxClkMismatchResume=hwImaGroupTxClkMismatchResume, hwImaLinkLifAlarm=hwImaLinkLifAlarm, hwImaLinkLifAlarmResume=hwImaLinkLifAlarmResume, hwImaLinkLodsAlarm=hwImaLinkLodsAlarm, hwImaLinkLodsAlarmResume=hwImaLinkLodsAlarmResume, hwImaLinkRfiAlarm=hwImaLinkRfiAlarm, hwImaLinkRfiAlarmResume=hwImaLinkRfiAlarmResume, hwImaLinkFeTxUnusableAlarm=hwImaLinkFeTxUnusableAlarm, hwImaLinkFeTxUnusableAlarmResume=hwImaLinkFeTxUnusableAlarmResume, hwImaLinkFeRxUnusableAlarm=hwImaLinkFeRxUnusableAlarm, hwImaLinkFeRxUnusableAlarmResume=hwImaLinkFeRxUnusableAlarmResume)

# Groups
mibBuilder.exportSymbols("HUAWEI-IMA-MIB", hwImaGroupGroup=hwImaGroupGroup, hwImaLinkGroup=hwImaLinkGroup)

# Compliances
mibBuilder.exportSymbols("HUAWEI-IMA-MIB", hwImaMibCompliance=hwImaMibCompliance)
