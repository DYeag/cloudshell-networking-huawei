# PySNMP SMI module. Autogenerated from smidump -f python HUAWEI-PORT-MIB
# by libsmi2pysnmp-0.1.3 at Thu Jun 30 13:55:26 2016,
# Python version sys.version_info(major=2, minor=7, micro=10, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ImaFrameLength, ImaGroupState, ) = mibBuilder.importSymbols("HUAWEI-IMA-MIB", "ImaFrameLength", "ImaGroupState")
( hwDatacomm, ) = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
( InterfaceIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
( EnabledStatus, ) = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter64, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( RowStatus, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue")

# Objects

hwPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157)).setRevisions(("2011-05-18 09:30",))
if mibBuilder.loadTexts: hwPortMIB.setOrganization("Huawei Technologies Co.,Ltd.")
if mibBuilder.loadTexts: hwPortMIB.setContactInfo("VRP Team Huawei Technologies Co.,Ltd.\nHuawei Bld.,NO.3 Xinxi Rd.,\nShang-Di Information Industry Base,\nHai-Dian District Beijing P.R. China\nhttp://www.huawei.com\nZip:100085")
if mibBuilder.loadTexts: hwPortMIB.setDescription("The private mib file includes the general extent\ninformation of the device.hwDatacomm(157).hwPortMIB")
hwPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1))
hwEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1))
hwEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1))
if mibBuilder.loadTexts: hwEthernetTable.setDescription("Indicates the physical attributes of the Ethernet interface.\nThis table lists the physical attributes of various Ethernet interfaces.")
hwEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwEthernetIfIndex"))
if mibBuilder.loadTexts: hwEthernetEntry.setDescription("Indicates the physical attributes of the Ethernet interface.\nThis table lists the physical attributes of various Ethernet interfaces.")
hwEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwEthernetIfIndex.setDescription("Interface index(es) of port(s) present on the device .")
hwEthernetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("otherLoop", 1), ("stopLoopback", 2), ("local", 3), ("remote", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetLoopback.setDescription("The local loopback of an Ethernet interface is used to test the interface itself.\nIf an interface works in a normal situation, disable the local loopback.\nBy default, stopLoopback is used.")
hwEthernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetPortType.setDescription("Indicates the type of the Ethernet interface: an optical interface or an electrical interface.")
hwEthernetSpeedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,5,1,2,)).subtype(namedValues=NamedValues(("other", 1), ("speed10", 2), ("speed100", 3), ("speed1000", 4), ("speed10000", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetSpeedSet.setDescription("Indicates the speed of the Ethernet interface. This parameter takes effect only on some Ethernet\nelectrical interfaces rather than optical interfaces. The parameter can be 10 M, 100 M, 1000 M,\n10000 M.")
hwEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("full", 1), ("half", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetDuplex.setDescription("Indicates the duplex mode of the Ethernet interface. An electrical Ethernet interface can\nwork in half-duplex mode or full-duplex mode. An optical Ethernet can work only in full-duplex mode.")
hwEthernetNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetNegotiation.setDescription("Indicates the auto-negotiation mode of the Ethernet electrical interface. By default, auto-negotiation is enabled.\nThe three objects, hwEthernetSpeedSet, hwEthernetDuplex, and hwEthernetNegotiation are associated with each other.\nIf the auto-negotiation of hwEthernetNegotiation is enabled, the values of hwEthernetSpeedSet and hwEthernetDuplex are auto-negotiated.\nIf hwEthernetSpeedSet is set to a certain value, hwEthernetDuplex is modified to the default value full,\nand hwEthernetNegotiation is automatically changed to disable. If the auto-negotiation of hwEthernetNegotiation is\nenabled, hwEthernetDuplex cannot be set.")
hwEthernetPortTypeOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("other", 1), ("copper", 2), ("fiber100", 3), ("fiber1000", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetPortTypeOperate.setDescription("Indicates the link type of the Ethernet interface. The type can be optical link or electrical link.\nThis parameter takes effect only on specific Ethernet interfaces.")
hwEthernetClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("master", 1), ("slave", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetClock.setDescription("Indicates the mode of the clock. The mode can be master or slave.\nBy default, the mode of a clock is slave. This parameter takes effect only on the WAN board.")
hwEthernetFlagJ0Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("j01ByteMode", 1), ("j016ByteMode", 2), ("j064ByteOrNullMode", 3), ("peer", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ0Mode.setDescription("Before the 10 GE WAN board processes packets, the overhead byte must be configured on the interface.\nThe overhead byte for the SDH frame, j0: Set section trace byte\nThe default value is j016ByteMode(2):hwEthernetFlagJ0Trace:NetEngine")
hwEthernetFlagJ0Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ0Value.setDescription("j01ByteMode Value. When hwEthernetFlagJ0Mode is set to j01ByteMode, this parameter takes effect.")
hwEthernetFlagJ0Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ0Trace.setDescription("Set section trace byte.\nWhen hwEthernetFlagJ0Mode is set to j016ByteMode or j064ByteOrNullMode, this variable takes effect.\nWhen hwEthernetFlagJ0Mode is set to j016ByteMode, this variable is up to 15 characters trace byte.\nWhen hwEthernetFlagJ0Mode is set to j064ByteOrNullMode, this variable is up to 64 characters trace byte.")
hwEthernetFlagJ1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("j11ByteMode", 1), ("j116ByteMode", 2), ("j164ByteOrNullMode", 3), ("peer", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ1Mode.setDescription("Indicates the overhead byte of the SDH frame. j1:sets path trace byte.\nThe default value is j116ByteMode(2) hwEthernetFlagJ1Trace NetEngine.")
hwEthernetFlagJ1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ1Value.setDescription("j11ByteMode Value. When hwEthernetFlagJ1Mode is set to j11ByteMode, this parameter takes effect.")
hwEthernetFlagJ1Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagJ1Trace.setDescription("Set path trace byte.\nWhen hwEthernetFlagJ1Mode is set to j116ByteMode or j164ByteOrNullMode, this variable takes effect.\nWhen hwEthernetFlagJ1Mode is set to j116ByteMode, this variable is up to 15 characters trace byte.\nWhen hwEthernetFlagJ1Mode is set to j164ByteOrNullMode, this variable is up to 64 characters trace byte.")
hwEthernetFlagC2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlagC2Value.setDescription("Indicates the overhead byte of the SDH frame.\nc2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF.\nThe default value is 0x02.")
hwEthernetUpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetUpHoldTime.setDescription("Indicates the response time to the event that the port turns Up. The units of hwEthernetUpHoldTime is millisecond.")
hwEthernetDownHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetDownHoldTime.setDescription("Indicates the response time to the event that the port turns Down. The units of hwEthernetDownHoldTime is millisecond.")
hwEthernetSubinterfaceStatisticEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 33), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetSubinterfaceStatisticEnable.setDescription("Enable the statistical function of the sub-interface.")
hwEthernetFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 34), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("receive", 1), ("send", 2), ("both", 3), ("none", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetFlowControl.setDescription("Set flow control of this port.")
hwEthernetOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 35), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("true", 1), ("false", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetOffline.setDescription("Set Line protocol state to down of this port.")
hwEthernetSetTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 36), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("lan", 1), ("wan", 2), ("none", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetSetTransferMode.setDescription("Set transfer mode of this port.")
hwEthernetJumboframeMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 13296))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetJumboframeMaxLength.setDescription("Set the jumboframe max length of this port.")
hwEthernetComboType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 38), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("auto", 1), ("copper", 2), ("fiber", 3), ("other", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetComboType.setDescription("combo mode of this port.")
hwEthernetPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 39), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("copper", 1), ("fiber", 2), ("other", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetPortMode.setDescription("Indicates combo mode of this port.")
hwEthernetNegotiationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 1, 1, 1, 40), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,1,)).subtype(namedValues=NamedValues(("notsupport", 1), ("auto", 2), ("master", 3), ("slave", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwEthernetNegotiationMode.setDescription("Set negotiation-mode for phy of electronic GE port.The mode is uesed for synchronizing clock. ")
hwPos = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2))
hwPosTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1))
if mibBuilder.loadTexts: hwPosTable.setDescription("Indicates the physical attributes of the POS interface.\nThis table lists the physical attributes of the POS interface.")
hwPosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwPosIfIndex"))
if mibBuilder.loadTexts: hwPosEntry.setDescription("Indicates the physical attributes of the POS interface.\nThis table lists the physical attributes of the POS interface.")
hwPosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwPosIfIndex.setDescription("Interface index(es) of port(s) present on the device .")
hwPosLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,3,2,)).subtype(namedValues=NamedValues(("ietf", 1), ("nonstandard", 2), ("hdlc", 3), ("ppp", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosLinkProtocol.setDescription("Indicates the link layer protocol of the POS interface.\nBy default, on a POS interface, PPP serves as the link layer protocol.")
hwPosFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFrameFormat.setDescription("Indicates the frame type of the POS interface.\nBy default, the frame type of the POS interface is SDH.\nThis variable identifies whether a SONET or a SDH signal is used across this interface.")
hwPosLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("otherLoop", 1), ("stopLoopback", 2), ("local", 3), ("remote", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosLoopback.setDescription("The local loopback of a POS interface is used to test the interface itself.\nIf an interface works in a normal situation, disable the local loopback.\nBy default, stopLoopback is used.")
hwPosScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosScramble.setDescription("Indicates the scramble function of payload. By default, the scramble function of payload is enabled.")
hwPosClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("master", 1), ("slave", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosClock.setDescription("Indicates whether the clock is in master mode or slave mode.\nBy default, the clock is in slave mode.")
hwPosCrcVerifyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("crc16", 1), ("crc32", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosCrcVerifyCode.setDescription("Indicates the length of the CRC verity code. The default value is 32.")
hwPosFlagJ0Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("j01ByteMode", 1), ("j016ByteMode", 2), ("j064ByteOrNullMode", 3), ("peer", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ0Mode.setDescription("Indicates the overhead byte of the SDH frame. j0: sets section trace byte.\nThe default value is j016ByteMode(2);hwPosFlagJ0Trace:NetEngine.")
hwPosFlagJ0Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ0Value.setDescription("Indicates the value of j01ByteMode. When hwPosFlagJ0Mode is set to j01ByteMode, hwPosFlagJ0Value takes effect.")
hwPosFlagJ0Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ0Trace.setDescription("Set section trace byte.\nWhen hwPosFlagJ0Mode is set to j016ByteMode or j064ByteOrNullMode, this variable takes effect.\nWhen hwPosFlagJ0Mode is set to j016ByteMode, the value of this variable is up to 15 characters trace byte.\nWhen hwPosFlagJ0Mode is set to j064ByteOrNullMode, the value of this variable is up to 64 characters trace byte.")
hwPosFlagJ1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("j11ByteMode", 1), ("j116ByteMode", 2), ("j164ByteOrNullMode", 3), ("peer", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ1Mode.setDescription("Indicates the overhead byte of the SDH frame. j1: sets path trace byte.\nThe default value is j116ByteMode(2);hwPosFlagJ1Trace:NetEngine.")
hwPosFlagJ1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ1Value.setDescription("Indicates the value of j11ByteMode. When hwPosFlagJ1Mode is set to j11ByteMode, hwPosFlagJ1Value takes effect.")
hwPosFlagJ1Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagJ1Trace.setDescription("Set path trace byte.\nWhen hwPosFlagJ1Mode is set to j116ByteMode or j164ByteOrNullMode, this variable takes effect.\nWhen hwPosFlagJ1Mode is set to j116ByteMode, this variable is up to 15 characters trace byte.\nWhen hwPosFlagJ1Mode is set to j164ByteOrNullMode, this variable is up to 64 characters trace byte.")
hwPosFlagC2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPosFlagC2Value.setDescription("Indicates the overhead byte of the SDH frame.\nc2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF.\nThe default value is 0x02.")
hwCpos = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3))
hwCposTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1))
if mibBuilder.loadTexts: hwCposTable.setDescription("Indicates the physical attributes of the CPOS interface.\nThis table lists the physical attributes of the CPOS interface.")
hwCposEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwCposIfIndex"))
if mibBuilder.loadTexts: hwCposEntry.setDescription("Indicates the physical attributes of the CPOS interface.\nThis table lists the physical attributes of the CPOS interface.")
hwCposIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwCposIfIndex.setDescription("Interface index(es) of port(s) present on the device .")
hwCposClock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("master", 1), ("slave", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposClock.setDescription("Indicates whether the clock is in master mode or slave mode.\nBy default, the clock is in slave mode.")
hwCposIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("stm1", 1), ("stm16", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposIfType.setDescription("Indicates the interface type.")
hwCposFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFrameFormat.setDescription("Indicates the frame type of the CPOS interface. By default, the frame type of the CPOS interface is SDH.")
hwCposMultiplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("au3", 1), ("au4", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposMultiplex.setDescription("Indicates the multiplex mode of the AUG. By default, the multiplex mode of the AUG is au-4.")
hwCposLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("otherloop", 1), ("stopLoopback", 2), ("local", 3), ("remote", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposLoopback.setDescription("Indicates the loopback function of the CPOS interface. By default, the loopback function is disabled.")
hwCposFlagJ0Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("j01ByteMode", 1), ("j016ByteMode", 2), ("j064ByteOrNullMode", 3), ("peer", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ0Mode.setDescription("Indicates the overhead byte of the SDH frame. j0: sets section trace byte.\nThe default value is j016ByteMode(2);hwCposFlagJ0Trace NetEngine.")
hwCposFlagJ0Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ0Value.setDescription("j01ByteMode Value . When hwCposFlagJ0Mode is set to j01ByteMode, hwCposFlagJ0Value takes effect.")
hwCposFlagJ0Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ0Trace.setDescription("Set section trace byte.\nWhen hwCposFlagJ0Mode is set to j016ByteMode or j064ByteOrNullMode, this variable takes effect.\nWhen hwCposFlagJ0Mode is set to j016ByteMode, this variable is up to 15 characters trace byte.\nWhen hwCposFlagJ0Mode is set to j064ByteOrNullMode, this variable is up to 64 characters trace byte.")
hwCposFlagJ1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("j11ByteMode", 1), ("j116ByteMode", 2), ("j164ByteOrNullMode", 3), ("peer", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ1Mode.setDescription("Indicates the overhead byte of the SDH frame. j1: sets path trace byte.\nThe default value is j116ByteMode(2);hwCposFlagJ1Trace NetEngine.")
hwCposFlagJ1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ1Value.setDescription("Indicates the value of j11ByteMode. When hwCposFlagJ1Mode is set to j11ByteMode, hwCposFlagJ1Value takes effect.")
hwCposFlagJ1Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ1Trace.setDescription("Set path trace byte.\nWhen hwCposFlagJ1Mode is set to j116ByteMode or j164ByteOrNullMode, this variable takes effect.\nWhen hwCposFlagJ1Mode is set to j116ByteMode, this variable is a string up to 15 characters trace byte.\nWhen hwCposFlagJ1Mode is set to j164ByteOrNullMode, this variable is a string up to 64 characters trace byte.")
hwCposFlagC2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagC2Value.setDescription("Indicates the overhead byte of the SDH frame.\nc2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF.\nThe default value is 22(0x16).")
hwCposB1SdAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposB1SdAlarmThreshold.setDescription("The threshold of B1 threshold crossing alarm.")
hwCposB1ExcAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposB1ExcAlarmThreshold.setDescription("The threshold of B1 threshold crossing alarm.")
hwCposB2SdAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposB2SdAlarmThreshold.setDescription("The threshold of B2 threshold crossing alarm.")
hwCposB2ExcAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposB2ExcAlarmThreshold.setDescription("The threshold of B2 threshold crossing alarm.")
hwCposB3SdAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposB3SdAlarmThreshold.setDescription("The threshold of B3 threshold crossing alarm.")
hwCposB3ExcAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposB3ExcAlarmThreshold.setDescription("The threshold of B3 threshold crossing alarm.")
hwCposLpBipSdAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposLpBipSdAlarmThreshold.setDescription("The threshold of BIP2 threshold crossing alarm.")
hwCposLpBipExcAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposLpBipExcAlarmThreshold.setDescription("The threshold of BIP2 threshold crossing alarm.")
hwCposHighPathNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCposHighPathNumber.setDescription("Indicates the overhead byte of the SDH frame.\nc2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF.\nThe default value is 22(0x16).")
hwCposLowPathNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCposLowPathNumber.setDescription("Indicates the overhead byte of the SDH frame.\nc2: indicates the signal label byte. It is a hexdecimal value ranging from 00 to FF.\nThe default value is 22(0x16).")
hwCposMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 1, 1, 38), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("h-mode", 1), ("l-mode", 2), ("a-mode", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposMappingMode.setDescription("Indicates the mapping mode of cpos port, default if h-mode(1).")
hwPortPhysicalHpIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 2), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: hwPortPhysicalHpIndex.setDescription("Indicates the higher order path number.")
hwPortPhysicalLpIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 3), Integer32()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: hwPortPhysicalLpIndex.setDescription("Indicates the low order path number.")
hwCposLpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 4))
if mibBuilder.loadTexts: hwCposLpTable.setDescription("Description.")
hwCposLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 4, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwCposLpIfIndex"), (0, "HUAWEI-PORT-MIB", "hwCposLpId"))
if mibBuilder.loadTexts: hwCposLpEntry.setDescription("Description.")
hwCposLpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 4, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwCposLpIfIndex.setDescription("Description.")
hwCposLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwCposLpId.setDescription("Description.")
hwCposFlagJ2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("j21ByteMode", 1), ("j216ByteMode", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ2Mode.setDescription("Description.")
hwCposFlagJ2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ2Value.setDescription("Description.")
hwCposFlagJ2Trace = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCposFlagJ2Trace.setDescription("Description.")
hwDs0ChannelBundle = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4))
hwDs0ChannelBundleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1))
if mibBuilder.loadTexts: hwDs0ChannelBundleTable.setDescription("This table is used to bundle timeslots of CE1/CT1 interfaces.")
hwDs0ChannelBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDs0ChannelBundleParentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwDs0ChannelBundleDs1ChannelId"), (0, "HUAWEI-PORT-MIB", "hwDs0ChannelBundleId"))
if mibBuilder.loadTexts: hwDs0ChannelBundleEntry.setDescription("This table is used to bundle timeslots of CE1/CT1 interfaces.")
hwDs0ChannelBundleParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs0ChannelBundleParentIfIndex.setDescription("Indicates the index of the parent interface.")
hwDs0ChannelBundleDs1ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs0ChannelBundleDs1ChannelId.setDescription("Indicates the channel ID.")
hwDs0ChannelBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs0ChannelBundleId.setDescription("Indicates the index number of the channel set.")
hwDs0ChannelBundleIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 11), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleIfIndex.setDescription("Indicates the index of the serial interface formed by the timeslot binding.")
hwDs0ChannelBundleTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 61))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleTimeSlots.setDescription("Indicates the number of the range of the timeslot to be bound.\nThe value is an integer ranging from 0 to 31. Multiple timeslots are\nseparated by ','. The range of timeslot is expressed by using '-'.\nFor E1 card mode:\nIf the timeslots are '0-31', it means unframed format,\nIf the timeslots are '0-30', it means framed format,\nFor T1 card mode:\nIf the timeslots are '0-23', it means unframed format,\nIf the timeslots are '0-22', it means framed format,\nand hwDs0ChannelBundleDs1ChannelId and hwDs0ChannelBundleId should be zero.")
hwDs0ChannelBundleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("s56", 1), ("s64", 2), )).clone("64")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleSpeed.setDescription("Configures the mode to configure the timeslots.\nIf the parameter 56 k is selected, the timeslots are bound in the mode of N x 56 kbit/s.\nIf the parameter 64 k is selected, the timeslots are bound in the mode of N x 64 kbit/s.\nThe default value is 64kbit/s.")
hwDs0ChannelBundleTimeSlot0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleTimeSlot0.setDescription("Indicates the timeslot0 to be bound or a single channel.\nThe ture value indicates it will be create TDM channel.")
hwDs0ChannelBundleIsMasterPW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("notacrpw", 0), ("masterpw", 1), ("notmasterpw", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDs0ChannelBundleIsMasterPW.setDescription("Indicates if the pw configed on this port is master pw.")
hwDs0ChannelBundleMasterPWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("unlock", 0), ("lock", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDs0ChannelBundleMasterPWStatus.setDescription("Indicates the status of master pw.")
hwDs0ChannelBundlePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDs0ChannelBundlePortName.setDescription("Port name.")
hwDs0ChannelBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 4, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs0ChannelBundleRowStatus.setDescription("This variable is used to create or delete an object.")
hwDs1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5))
hwDs1Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1))
if mibBuilder.loadTexts: hwDs1Table.setDescription("This table lists all E1/CE1 interfaces or T1/CT1 interfaces.\nAfter the mode of E3/CE3 interfaces or T3/CT3 interfaces is set to channelized, this table can be used\nto create E1/CE1, or T1/CT1, or E3/CE3, or T3/CT3 interfaces.")
hwDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDs1ParentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwDs1ChannelId"), (0, "HUAWEI-PORT-MIB", "hwDs1IfIndex"))
if mibBuilder.loadTexts: hwDs1Entry.setDescription("This table lists all E1/CE1 interfaces or T1/CT1 interfaces.\nAfter the mode of E3/CE3 interfaces or T3/CT3 interfaces is set to channelized, this table can be used\nto create E1/CE1, or T1/CT1, or E3/CE3, or T3/CT3 interfaces.")
hwDs1ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs1ParentIfIndex.setDescription("Indicates the index of the parent interface.")
hwDs1ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs1ChannelId.setDescription("Indicates the channel ID.")
hwDs1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 3), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs1IfIndex.setDescription("Indicates the interface index.")
hwDs1ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("t1", 1), ("e1", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1ChannelType.setDescription("Indicates the interface type. The type can be E1/CE1 or T1/CT1.")
hwDs1IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(255,4,2,3,1,)).subtype(namedValues=NamedValues(("e3", 1), ("t3", 2), ("none", 255), ("cpos", 3), ("atm", 4), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1IfType.setDescription("Indicates the interface tyep.\ne3: is multiplexed by CE3 interfaces.\nt3: is multiplexed by CT3 interfaces.\ncpos: is multiplexed by CPOS interfaces.\natm: is multiplexed by ATM interfaces.\nnone: indicates the physical interface.\n\ndefault:none")
hwDs1Channelized = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Channelized.setDescription("Indicates the working mode of the interface.\ntrue: indicates the channelized mode.\nfalse: indicates the clear channel mode.\nThe default is true.")
hwDs1CodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,255,3,2,)).subtype(namedValues=NamedValues(("ami", 1), ("hdb3", 2), ("none", 255), ("b8zs", 3), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1CodeType.setDescription("Indicates the code type of the interface.\nami: is short for Alternate Mark Inversion.\nhdb3: is short for High Density Bipolar of Order 3.\nb8zs: is short for Bipolar with 8-Zero Substitution.\nnone: is not supported")
hwDs1Clock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("master", 1), ("slave", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Clock.setDescription("Indicates the clock mode of the interface.\nmaster: indicates that the clock works in master mode and uses the internal clock signal.\nslave: indicates that the clock works in slave mode and uses the line clock signal.")
hwDs1FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("esf", 1), ("sf", 2), ("noCrc4", 3), ("crc", 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1FrameFormat.setDescription("Indicates the frame format of the interface.\ncrc4: indicates that the frame format is CRC4.\nno-crc4: indicates that the frame format is no-CRC4.\nsf: indicates that the frame format is Super Frame.\nesf: indicates that the frame format is Extended Super Frame.\nBy default, the frame format of an E1 interface is no-crc4.\nBy default, the frame format of a T1 interface is esf.")
hwDs1Cable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(255,2,1,)).subtype(namedValues=NamedValues(("long", 1), ("short", 2), ("none", 255), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Cable.setDescription("The cable command takes effect only if the E1 interface card uses 75-ohm coaxial cable.\nThe default is short. If no cable is connected, this parameter is displayed as null.")
hwDs1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(255,2,4,1,3,)).subtype(namedValues=NamedValues(("local", 1), ("remote", 2), ("none", 255), ("payload", 3), ("cell", 4), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Loopback.setDescription("Enable the loopback function of the interface.\nlocal: enables the local loopback on the interface.\nremote: enables the remote loopback on the interface.\npayload: enables the remote payload loopback on the interface.\ncell: enables the local cell loopback. The local cell loopback is used to test the local physical chip.")
hwDs1ClockRecoveryDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1ClockRecoveryDomain.setDescription("Indicates the clock recovery domain of the interface.")
hwDs1PWClockDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1PWClockDomain.setDescription("Indicates the clock recovery domain of the interface.")
hwDs1WorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDs1WorkMode.setDescription("Indicates the clock recovery domain of the interface.")
hwDs1EsAlarmTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(65)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1EsAlarmTriggerThreshold.setDescription("The trigger threshold of code violation count threshold crossing alarm of E1 line side .")
hwDs1EsAlarmResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1EsAlarmResumeThreshold.setDescription("The resume threshold of code violation count threshold crossing alarm of E1 line side .")
hwDs1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1RowStatus.setDescription("This variable is used to create or delete an object.")
hwDs1Lbo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 52), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,5,2,3,)).subtype(namedValues=NamedValues(("db75", 1), ("db155", 2), ("db225", 3), ("none", 4), ("notsupport", 5), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1Lbo.setDescription("The lbo of T1 port. Unit: db. the value is expanded 10 times,so the real value should be reduced 10 times")
hwDs1CableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 5, 1, 1, 53), Integer().subtype(subtypeSpec=SingleValueConstraint(4,6,1,255,2,3,5,)).subtype(namedValues=NamedValues(("length133", 1), ("length266", 2), ("none", 255), ("length399", 3), ("length533", 4), ("length655", 5), ("notsupport", 6), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs1CableLength.setDescription("The cableLength of T1 port. Unit: feet.")
hwDs3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6))
hwDs3Table = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1))
if mibBuilder.loadTexts: hwDs3Table.setDescription("This table lists all E3/CE3 interfaces or all T3/CT3 interfaces.")
hwDs3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDs3ParentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwDs3ChannelId"), (0, "HUAWEI-PORT-MIB", "hwDs3IfIndex"))
if mibBuilder.loadTexts: hwDs3Entry.setDescription("This table lists all E3/CE3 interfaces or all T3/CT3 interfaces.")
hwDs3ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs3ParentIfIndex.setDescription("Indicates the index of the parent interface.")
hwDs3ChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs3ChannelId.setDescription("Indicates the index of the parent interface.")
hwDs3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 3), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwDs3IfIndex.setDescription("Indicates the interface index.")
hwDs3ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("t3", 1), ("e3", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3ChannelType.setDescription("Indicates the interface type. The type can be E3/CE3 or T3/CT3.")
hwDs3IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(255,1,)).subtype(namedValues=NamedValues(("cpos", 1), ("none", 255), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3IfType.setDescription("Indicates the parent interface type of the interface.\ncpos: is multiplexed by CPOS interfaces.\nnone: indicates the interface is a physical interface.\nThe default is none.")
hwDs3Channelized = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Channelized.setDescription("Indicates the working mode of the interface.\ntrue: indicates the channelized mode.\nfalse: indicates the clear channel mode.\nThe default is true.")
hwDs3Clock = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("master", 1), ("slave", 2), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Clock.setDescription("Indicates the clock mode of the interface.\nmaster: indicates that the clock works in master mode and uses the internal clock signal.\nslave: indicates that the clock works in slave mode and uses the line clock signal.")
hwDs3FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(5,4,1,6,2,7,3,)).subtype(namedValues=NamedValues(("g832Adm", 1), ("g751Adm", 2), ("g751Plcp", 3), ("cbitAdm", 4), ("cbitPlcp", 5), ("m23Adm", 6), ("m23Plcp", 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3FrameFormat.setDescription("Indicates the frame format of the interface.")
hwDs3Scramble = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Scramble.setDescription("Indicates the scramble function of the interface.\ntrue: enables the scramble function.\nfalse: disables the scramble function.\nThe default is false.")
hwDs3Cable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("long", 1), ("short", 2), )).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Cable.setDescription("The cable command takes effect only if the E3 interface card uses 75-ohm coaxial cable.\nThe default is short. If no cable is connected, this parameter is displayed as null.")
hwDs3NationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("n0", 1), ("n1", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3NationalBit.setDescription("Indicates the national bit of the E3/CE3 interface.\nn0: indicates the national bit is 0 and the interface supports only the communication within a country.\nn1: indicates the national bit is 1 and the interface supports the international communication.  ")
hwDs3Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(255,2,4,1,3,)).subtype(namedValues=NamedValues(("local", 1), ("remote", 2), ("none", 255), ("payload", 3), ("cell", 4), )).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3Loopback.setDescription("Enable the loopback function of the interface.\nlocal: enables the local loopback on the interface.\nremote: enables the remote loopback on the interface.\npayload: enables the remote payload loopback on the interface.\ncell: enables the local cell loopback. The local cell loopback is used to test the local physical chip.")
hwDs3CreateSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3CreateSerial.setDescription("Create serial interface from Ds3 interface.\nTrue create serial interface.\nFalse  destroy serial interface.\n ")
hwDs3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 6, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDs3RowStatus.setDescription("This variable is used to create or delete an object.")
hwBundleSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7))
hwBundleSerialTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1))
if mibBuilder.loadTexts: hwBundleSerialTable.setDescription("Indicates the attribute of the serial interface formed by timeslots.\nThis table lists the physical attributes of the serial interface.")
hwBundleSerialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwBundleSerialIfIndex"))
if mibBuilder.loadTexts: hwBundleSerialEntry.setDescription("Indicates the attribute of the serial interface formed by timeslots.\nThis table lists the physical attributes of the serial interface.")
hwBundleSerialIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwBundleSerialIfIndex.setDescription("Interface index(es) of serial(s) present on the device .")
hwBundleSerialLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(255,4,6,7,1,5,2,3,)).subtype(namedValues=NamedValues(("ietf", 1), ("nonstandard", 2), ("none", 255), ("hdlc", 3), ("ppp", 4), ("lapb", 5), ("atm", 6), ("tdm", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialLinkProtocol.setDescription("The link-protocol of interface. The serial(s) always use PPP as its link-protocol for default.")
hwBundleSerialTimerHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialTimerHold.setDescription("Indicates the interval for sending Keepalive packets from the serial interface to the peer.\nThe default is 10 seconds.")
hwBundleSerialLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialLoopback.setDescription("true: enables the loopback on the serial interface.\nfalse: disables the loopback on the serial interface.\nBy default, the loopback on the serial interface is disabled.")
hwBundleSerialCrcVerifyCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 7, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("crc16", 1), ("crc32", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBundleSerialCrcVerifyCode.setDescription("Indicates the length of the CRC verify code. The default is 32.")
hwPhysicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8))
hwPhysicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1))
if mibBuilder.loadTexts: hwPhysicalPortTable.setDescription("Indicates the attribute of the physical port.")
hwPhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwPhysicalPortIfIndex"))
if mibBuilder.loadTexts: hwPhysicalPortEntry.setDescription("Indicates the attribute of the physical port.")
hwPhysicalPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwPhysicalPortIfIndex.setDescription("Interface index(es) of physical port(s) present on the device .")
hwPhysicalPortDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortDelayTime.setDescription("Indicates the port tx enabling delay time. The units of hwPhysicalPortDelayTime is millisecond. The default value is 0 ms. ")
hwPhysicalPortDelayRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortDelayRemainTime.setDescription("Indicates the remnant time of enabling port-tx. The units of hwPhysicalPortDelayTime is millisecond.")
hwPhysicalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortName.setDescription("Indicates the physical port name.")
hwPhysicalPortInChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortInChassis.setDescription("Indicates the physical port in chassis.")
hwPhysicalPortInSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortInSlot.setDescription("Indicates the SlotID.")
hwPhysicalPortInCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortInCard.setDescription("Indicates the CardID.")
hwPhysicalPortInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortInPort.setDescription("Indicates the PortID.")
hwPhysicalAutoShutLaserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(255,1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ("not-support", 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalAutoShutLaserEnable.setDescription(" Indicates enable or disable the laser auto shut . Default is disable.")
hwPhysicalAutoShutLaserOpenInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(100,300),ValueRangeConstraint(2147483647,2147483647),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalAutoShutLaserOpenInterval.setDescription(" Indicates the open interval of laser auto shut . The default value is 200 (unit: 10 ms). The value 2147483647 means that the interface doesn't support laser auto shut.")
hwPhysicalAutoShutLaserCloseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(200,30000),ValueRangeConstraint(2147483647,2147483647),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalAutoShutLaserCloseInterval.setDescription(" Indicates the close interval of laser auto shut . The default value is 6000 (unit: 10 ms). The value 2147483647 means that the interface doesn't support laser auto shut.")
hwPhysicalAutoShutLaserLongOpenInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(200,30000),ValueRangeConstraint(2147483647,2147483647),))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalAutoShutLaserLongOpenInterval.setDescription(" Indicates the long open interval of laser auto shut . The default value is 9000 (unit: 10 ms). The value 2147483647 means that the interface doesn't support laser auto shut.")
hwPhysicalLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("otherLoop", 1), ("stopLoopback", 2), ("local", 3), ("remote", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalLoopbackType.setDescription(" The current state of loopbackType in port.")
hwPhysicalShutLaser = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,255,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ("not-support", 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalShutLaser.setDescription(" Turn on or turn off the laser.")
hwPhysicalLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,255,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ("not-support", 255), ("offline", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalLaserStatus.setDescription(" The current status of the laser.")
hwPhysicalPortHoldUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortHoldUp.setDescription(" Indicates enable or disable the interface to remain Up , the default value is disable.")
hwPhysicalPortAlarmInverseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 1, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortAlarmInverseEnable.setDescription("Config port alarm inverse enable.")
hwSDHRsMsPerfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2))
if mibBuilder.loadTexts: hwSDHRsMsPerfCurrentTable.setDescription("Indicates the performance stat of the Regenerator Section.")
hwSDHRsMsPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwSDHRsMsPerfCurrentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwSDHRsMsPerfCurrentDataIndex"))
if mibBuilder.loadTexts: hwSDHRsMsPerfCurrentEntry.setDescription("Indicates the performance stat of the Regenerator Section.")
hwSDHRsMsPerfCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHRsMsPerfCurrentIfIndex.setDescription("Interface index(es) of port(s) present on the device .")
hwSDHRsMsPerfCurrentDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHRsMsPerfCurrentDataIndex.setDescription("Data index(es) of port(s) present on the device .")
hwSDHRsPerfCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHRsPerfCurrentBBE.setDescription("Regenerator Section Background Block Error.")
hwSDHRsPerfCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHRsPerfCurrentES.setDescription("Regenerator Section Errored Second.")
hwSDHRsPerfCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHRsPerfCurrentSES.setDescription("Regenerator Section Severely Errored Second.")
hwSDHRsPerfCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHRsPerfCurrentUAS.setDescription("Regenerator section unavailable second.")
hwSDHMsPerfCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentBBE.setDescription("Multiplex Section Background Block Error.")
hwSDHMsPerfCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentES.setDescription("Multiplex Section Errored Second.")
hwSDHMsPerfCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentSES.setDescription("Multiplex Section Severely Errored Second.")
hwSDHMsPerfCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentUAS.setDescription("Multiplex Section Unavaliable Seconds.")
hwSDHMsPerfCurrentFEBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentFEBBE.setDescription("Multiplex Section Far end Background Block Error.")
hwSDHMsPerfCurrentFEES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentFEES.setDescription("Multiplex Section Far end Errored Second.")
hwSDHMsPerfCurrentFESES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentFESES.setDescription("Multiplex Section Far end Severely Errored Second.")
hwSDHMsPerfCurrentFEUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHMsPerfCurrentFEUAS.setDescription("Multiplex Section Far end Unavaliable Seconds.")
hwSDHHpPerfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3))
if mibBuilder.loadTexts: hwSDHHpPerfCurrentTable.setDescription("Indicates the performance stat of the Higher order Path.")
hwSDHHpPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwSDHHpPerfCurrentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwSDHHpPerfCurrentHpIndex"), (0, "HUAWEI-PORT-MIB", "hwSDHHpPerfCurrentDataIndex"))
if mibBuilder.loadTexts: hwSDHHpPerfCurrentEntry.setDescription("Indicates the performance stat of the Higher order Path.")
hwSDHHpPerfCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentIfIndex.setDescription("Interface index(es) of port(s) present on the device .")
hwSDHHpPerfCurrentHpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 2), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentHpIndex.setDescription("Higher order Path index(es) of port(s) present on the device .")
hwSDHHpPerfCurrentDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentDataIndex.setDescription("Data index(es) of port(s) present on the device .")
hwSDHHpPerfCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentBBE.setDescription("Multiplex Section Far end Unavaliable Seconds.")
hwSDHHpPerfCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentES.setDescription("Higher order Path Errored Second.")
hwSDHHpPerfCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentSES.setDescription("Higher order Path Severely Errored Second.")
hwSDHHpPerfCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentUAS.setDescription("Higher order Path Unavaliable Seconds.")
hwSDHHpPerfCurrentFEBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentFEBBE.setDescription("Higher order Path Far end Background Block Error.")
hwSDHHpPerfCurrentFEES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentFEES.setDescription("Higher order Path Far end Errored Second.")
hwSDHHpPerfCurrentFESES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentFESES.setDescription("Higher order Path Far end Severely Errored Second.")
hwSDHHpPerfCurrentFEUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHHpPerfCurrentFEUAS.setDescription("Higher order Path Far end Unavaliable Seconds.")
hwSDHLpPerfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4))
if mibBuilder.loadTexts: hwSDHLpPerfCurrentTable.setDescription("Indicates the performance stat of the Low order Path.")
hwSDHLpPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwSDHLpPerfCurrentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwSDHLpPerfCurrentHpIndex"), (0, "HUAWEI-PORT-MIB", "hwSDHLpPerfCurrentLpIndex"), (0, "HUAWEI-PORT-MIB", "hwSDHLpPerfCurrentDataIndex"))
if mibBuilder.loadTexts: hwSDHLpPerfCurrentEntry.setDescription("Indicates the performance stat of the Low order Path.")
hwSDHLpPerfCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentIfIndex.setDescription("Interface index(es) of port(s) present on the device .")
hwSDHLpPerfCurrentHpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 2), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentHpIndex.setDescription("Higher order Path index(es) of port(s) present on the device .")
hwSDHLpPerfCurrentLpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 3), Integer32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentLpIndex.setDescription("Low order Path index(es) of port(s) present on the device .")
hwSDHLpPerfCurrentDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentDataIndex.setDescription("Data index(es) of port(s) present on the device .")
hwSDHLpPerfCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentBBE.setDescription("Low order Path Background Block Error.")
hwSDHLpPerfCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentES.setDescription("Low order Path errored seconds.")
hwSDHLpPerfCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentSES.setDescription("Low order Path severely errored seconds.")
hwSDHLpPerfCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentUAS.setDescription("Low order Path Unavailable second.")
hwSDHLpPerfCurrentFEBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentFEBBE.setDescription("Low order Path Far-end Background Block Error.")
hwSDHLpPerfCurrentFEES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentFEES.setDescription("Low order Path Far-end errored seconds.")
hwSDHLpPerfCurrentFESES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentFESES.setDescription("Low order Path Far-end severely errored seconds.")
hwSDHLpPerfCurrentFEUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSDHLpPerfCurrentFEUAS.setDescription("Low order Path Far-end Unavailable second.")
hwPDHPerfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5))
if mibBuilder.loadTexts: hwPDHPerfCurrentTable.setDescription("Indicates the performance stat of the E1 line side.")
hwPDHPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwPDHPerfCurrentIfIndex"), (0, "HUAWEI-PORT-MIB", "hwPDHPerfCurrentDataIndex"))
if mibBuilder.loadTexts: hwPDHPerfCurrentEntry.setDescription("Indicates the performance stat of the E1 line side.")
hwPDHPerfCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwPDHPerfCurrentIfIndex.setDescription("Interface index(es) of port(s) present on the device.")
hwPDHPerfCurrentDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwPDHPerfCurrentDataIndex.setDescription("Data index(es) of port(s) present on the device.")
hwPDHPerfCurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPDHPerfCurrentBBE.setDescription("E1 line side code violation count.")
hwPDHPerfCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPDHPerfCurrentES.setDescription("E1 line side code violation errored second.")
hwPDHPerfCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPDHPerfCurrentSES.setDescription("E1 line side code violation severely errored second.")
hwPDHPerfCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPDHPerfCurrentUAS.setDescription("E1 line side code violation loss-of-signal second.")
hwEthPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 6))
if mibBuilder.loadTexts: hwEthPortStatTable.setDescription("Indicates the stat of the ethernet interface.")
hwEthPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 6, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwEthPortStatIfIndex"))
if mibBuilder.loadTexts: hwEthPortStatEntry.setDescription("Indicates the stat of the ethernet interface.")
hwEthPortStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 6, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwEthPortStatIfIndex.setDescription("Interface index(es) of port(s) present on the device.")
hwEthPortStatBadBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthPortStatBadBytes.setDescription("Indicates the stat of badbytes.")
hwPhysicalPortGlobleCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 7))
hwLoopBackAutoClearEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 7, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoopBackAutoClearEnable.setDescription("set loopback autoclear status enable(1) disable(2).")
hwLoopBackAutoClearPeriod = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readwrite").setUnits("minute")
if mibBuilder.loadTexts: hwLoopBackAutoClearPeriod.setDescription("set loopback autoclear period, unit minute,value range<1-2880> default<5 minute>.")
hwPortAlarmInverseEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 8, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortAlarmInverseEnable.setDescription("Config globle alarm inverse enable.")
hwDslGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9))
hwDslGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1))
if mibBuilder.loadTexts: hwDslGroupTable.setDescription("Indicates the attributes of the dsl group.")
hwDslGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDslGroupIfIndex"))
if mibBuilder.loadTexts: hwDslGroupEntry.setDescription("An entry in the dsl group table.")
hwDslGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupIfIndex.setDescription("Interface index(es) of dsl group present on the device.")
hwDslGroupWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atm", 1), ("efm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupWorkMode.setDescription("The dsl group of SHD4 card can work in efm or atm mode. Default is efm.")
hwDslGroupBisState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ("notSupport", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupBisState.setDescription("Bis can be enabled or disabled in ATM mode of SHD4 card.")
hwDslGroupEncapeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("eoaLlc", 1), ("eoaVcmux", 2), ("notSupport", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupEncapeMode.setDescription("The dsl group of AVD8 card can work in ETHoA-LLC mode or ETHoA-VCMUX mode. Default is ETHoA-LLC.")
hwDslGroupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ("notSupport", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupEnable.setDescription("Trigger the operation of binding dsl link(s) to the dsl group.")
hwDslGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 1, 1, 60), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupRowStatus.setDescription("An object that allows entries in this table to\nbe created, modified and deleted using the RowStatus\nconvention.\nA SET operation to any other attribute in this row, when\nthis object is set to 'active' (1), MUST be rejected with\nan SNMP error (e.g., inconsistentValue).\nIn order to perform a SET operation to any other attribute\nin this table the manager MUST set this object to\nnotInService (2).  After setting the object back to\n'active' the implementation MAY tear down all the sessions\nthat belong to this partition and recreate them, depending\non what session attributes have been modified.")
hwDslGroupBoundVeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2))
if mibBuilder.loadTexts: hwDslGroupBoundVeTable.setDescription("Indicates the attributes of the dsl group bound virtual-ethernet.")
hwDslGroupBoundVeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDslGroupIfIndexOfBound"), (0, "HUAWEI-PORT-MIB", "hwDslGroupPvcId"))
if mibBuilder.loadTexts: hwDslGroupBoundVeEntry.setDescription("An entry in the dsl group bound vitrual-ethernet table.")
hwDslGroupIfIndexOfBound = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupIfIndexOfBound.setDescription("Interface index(es) of dsl group present on the device.")
hwVirtualEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualEthernetIfIndex.setDescription("The first virtual ethernet interface which the dsl group is bound to.")
hwDslGroupVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupVpi.setDescription("VPI value of the 1st PVC pair.")
hwDslGroupVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupVci.setDescription("VCI value of the 1st PVC pair.")
hwDslGroupPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupPvcId.setDescription("Identifier for VPI/VCI Pair.")
hwBoundVeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 2, 1, 50), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBoundVeRowStatus.setDescription("An object that allows entries in this table to\nbe created, modified and deleted using the RowStatus\nconvention.\nA SET operation to any other attribute in this row, when\nthis object is set to 'active' (1), MUST be rejected with\nan SNMP error (e.g., inconsistentValue).\nIn order to perform a SET operation to any other attribute\nin this table the manager MUST set this object to\nnotInService (2).  After setting the object back to\n'active' the implementation MAY tear down all the sessions\nthat belong to this partition and recreate them, depending\non what session attributes have been modified.")
hwDslGroupBindVeTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 3))
if mibBuilder.loadTexts: hwDslGroupBindVeTable.setDescription("Indicates the relation of the dsl group binding virtual-ethernet.")
hwDslGroupBindVeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 3, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDslGroupInterfaceIndex"), (0, "HUAWEI-PORT-MIB", "hwVirtualEthernetInterfaceIndex"))
if mibBuilder.loadTexts: hwDslGroupBindVeEntry.setDescription("An entry in the dsl group binding vitrual-ethernet table.")
hwDslGroupInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupInterfaceIndex.setDescription("Interface index(es) of the dsl group present on the device.")
hwVirtualEthernetInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVirtualEthernetInterfaceIndex.setDescription("The virtual ethernet interface index which the dsl group is bound to.")
hwBindVeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 9, 3, 1, 50), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBindVeRowStatus.setDescription("An object that allows entries in this table to\nbe created, modified and deleted using the RowStatus\nconvention.\nA SET operation to any other attribute in this row, when\nthis object is set to 'active' (1), MUST be rejected with\nan SNMP error (e.g., inconsistentValue).\nIn order to perform a SET operation to any other attribute\nin this table the manager MUST set this object to\nnotInService (2).  After setting the object back to\n'active' the implementation MAY tear down all the sessions\nthat belong to this partition and recreate them, depending\non what session attributes have been modified.")
hwDslGroupIma = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10))
hwDslGroupImaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1))
if mibBuilder.loadTexts: hwDslGroupImaTable.setDescription("Indicates the attributes of the dsl ima group.")
hwDslGroupImaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"))
if mibBuilder.loadTexts: hwDslGroupImaEntry.setDescription("An entry of the dsl ima group table.")
hwDslGroupImaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaIfIndex.setDescription("Interface index(es) of dsl group present on the device.")
hwDslGroupImaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("v0", 1), ("v1", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupImaVersion.setDescription("Version of the ima group of SHD4I card.\nv0: ima protocol version 1.0;\nv1: ima protocol version 1.1. ")
hwDslGroupImaFrameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 3), ImaFrameLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupImaFrameLen.setDescription("Frame length of the ima group of SHD4I card. If ima protocol version is 1.0, the frame length is only 128.")
hwDslGroupImaReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupImaReset.setDescription("ima group reset for SHD4I card.")
hwDslGroupImaTxMinLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupImaTxMinLinkNum.setDescription("Minimum active links number by TX direction.")
hwDslGroupImaRxMinLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslGroupImaRxMinLinkNum.setDescription("Minimum active links number by RX direction.")
hwDslGroupImaNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 7), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaNeState.setDescription("The current state of the near-end ima group.")
hwDslGroupImaFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 8), ImaGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaFeState.setDescription("The current state of the far-end ima group.")
hwDslGroupImaTxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaTxCellRate.setDescription("The current cell rate of ima group by TX direction.")
hwDslGroupImaRxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaRxCellRate.setDescription("The current cell rate of ima group by RX direction.")
hwDslGroupImaTxActLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaTxActLinkNum.setDescription("Number of active links by TX direction.")
hwDslGroupImaRxActLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaRxActLinkNum.setDescription("Number of active links by RX direction.")
hwDslGroupImaIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 10, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslGroupImaIfName.setDescription("The interface name of ima group.")
hwDslLink = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11))
hwDslLinkTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11, 1))
if mibBuilder.loadTexts: hwDslLinkTable.setDescription("Indicates the dsl link bound relation.")
hwDslLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwBoundDslGroupIfIndex"), (0, "HUAWEI-PORT-MIB", "hwDslLinkIfIndex"))
if mibBuilder.loadTexts: hwDslLinkEntry.setDescription("An entry of the dsl link bound relation.")
hwBoundDslGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBoundDslGroupIfIndex.setDescription("Interface index of dsl group which the dsl link bound to.")
hwDslLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11, 1, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslLinkIfIndex.setDescription("Interface index of the dsl link device.")
hwDslLinkIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDslLinkIfName.setDescription("The interface name of the dsl link.")
hwBoundDslGroupIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBoundDslGroupIfName.setDescription("Interface index of dsl group which the dsl link bound to.")
hwDslLinkBoundRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 11, 1, 1, 50), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDslLinkBoundRowStatus.setDescription("An object that allows entries in this table to\nbe created, modified and deleted using the RowStatus\nconvention.\nA SET operation to any other attribute in this row, when\nthis object is set to 'active' (1), MUST be rejected with\nan SNMP error (e.g., inconsistentValue).\nIn order to perform a SET operation to any other attribute\nin this table the manager MUST set this object to\nnotInService (2).  After setting the object back to\n'active' the implementation MAY tear down all the sessions\nthat belong to this partition and recreate them, depending\non what session attributes have been modified.")
hwPWAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12))
hwPWAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1))
if mibBuilder.loadTexts: hwPWAlarmTable.setDescription("Indicates the attributes of the PW alarm.")
hwPWAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwPWAlarmIfIndex"))
if mibBuilder.loadTexts: hwPWAlarmEntry.setDescription("An entry of the PW alarm relation.")
hwPWAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwPWAlarmIfIndex.setDescription("Interface index of PW alarm group.")
hwPWCesVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWCesVcID.setDescription("Vc ID of PW alarm group.")
hwPWCesVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWCesVcType.setDescription("Vc Type of PW alarm group.")
hwPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPeerIpAddr.setDescription("Peer IP Address of PW alarm group.")
hwAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAlarmStatus.setDescription("Alarm status of PW alarm group.")
hwPWAlarmRMLEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPWAlarmRMLEnableStatus.setDescription("PW control word RML of PW alarm group.")
hwLosAlarmTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLosAlarmTriggerThreshold.setDescription("Trigger Threshold of continuous loss packets of PW alarm group.")
hwLosAlarmResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLosAlarmResumeThreshold.setDescription("Resume Threshold of continuous loss packets of PW alarm group.")
hwPWPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPWPortName.setDescription("PW port name of PW alarm group.")
hwLosPktExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLosPktExcTriggerThreshold.setDescription("Trigger threshold of lost packets of PW alarm group.")
hwLosPktExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLosPktExcResumeThreshold.setDescription("Resume threshold of lost packets of PW alarm group.")
hwMisorderPktExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMisorderPktExcTriggerThreshold.setDescription("Trigger threshold of packets lost due to the out-of-order condition of PW alarm group.")
hwMisorderPktExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMisorderPktExcResumeThreshold.setDescription("Resume threshold of packets lost due to the out-of-order condition of PW alarm group.")
hwStrayPktExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStrayPktExcTriggerThreshold.setDescription("Trigger threshold of misconnected packets of PW alarm group.")
hwStrayPktExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwStrayPktExcResumeThreshold.setDescription("Resume threshold of misconnected packets of PW alarm group.")
hwMalPktExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMalPktExcTriggerThreshold.setDescription("Trigger threshold of malformed packets of PW alarm group.")
hwMalPktExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMalPktExcResumeThreshold.setDescription("Resume threshold of malformed packets of PW alarm group.")
hwJtrUdrExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwJtrUdrExcTriggerThreshold.setDescription("Trigger threshold of jitter buffer underflows of PW alarm group.")
hwJtrUdrExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwJtrUdrExcResumeThreshold.setDescription("Resume threshold of jitter buffer underflows of PW alarm group.")
hwJtrOvrExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwJtrOvrExcTriggerThreshold.setDescription("Trigger threshold of jitter buffer overflows of PW alarm group.")
hwJtrOvrExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwJtrOvrExcResumeThreshold.setDescription("Resume threshold of jitter buffer overflows of PW alarm group.")
hwAtmPWAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2))
if mibBuilder.loadTexts: hwAtmPWAlarmTable.setDescription("Indicates the attributes of the ATM PW alarm.")
hwAtmPWAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwAtmPWAlarmIfIndex"))
if mibBuilder.loadTexts: hwAtmPWAlarmEntry.setDescription("An entry of the ATM PW alarm relation.")
hwAtmPWAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAtmPWAlarmIfIndex.setDescription("Interface index of ATM PW alarm group.")
hwAtmVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAtmVcID.setDescription("Vc ID of ATM PW alarm group.")
hwAtmVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAtmVcType.setDescription("Vc Type of ATM PW alarm group.")
hwAtmPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAtmPeerIpAddr.setDescription("Peer IP Address of ATM PW alarm group.")
hwAtmPWPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAtmPWPortName.setDescription("ATM PW port name of PW alarm group.")
hwAtmLosPktExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmLosPktExcTriggerThreshold.setDescription("Trigger threshold of lost packets of ATM PW alarm group.")
hwAtmLosPktExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmLosPktExcResumeThreshold.setDescription("Resume threshold of lost packets of ATM PW alarm group.")
hwAtmMisorderPktExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmMisorderPktExcTriggerThreshold.setDescription("Trigger threshold of packets lost due to the out-of-order condition of ATM PW alarm group.")
hwAtmMisorderPktExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmMisorderPktExcResumeThreshold.setDescription("Resume threshold of packets lost due to the out-of-order condition of ATM PW alarm group.")
hwAtmUnknownCellExcTriggerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmUnknownCellExcTriggerThreshold.setDescription("Trigger threshold of unknown cell of ATM PW alarm group.")
hwAtmUnknownCellExcResumeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 12, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmUnknownCellExcResumeThreshold.setDescription("Resume threshold of unknown cell of ATM PW alarm group.")
hwSNMPTrapEn = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13))
hwSNMPTrapEnTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1))
if mibBuilder.loadTexts: hwSNMPTrapEnTable.setDescription("Reserved nodes do not support this function temporarily.")
hwSNMPTrapEnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwSNMPTrapEnIfIndex"))
if mibBuilder.loadTexts: hwSNMPTrapEnEntry.setDescription("Reserved nodes do not support this function temporarily.")
hwSNMPTrapEnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwSNMPTrapEnIfIndex.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWLopsEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWLopsEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWRemoteLosPktEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWRemoteLosPktEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWOppositeRAIEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWOppositeRAIEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWOppositeAcfaultEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWOppositeAcfaultEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWLosPktEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWLosPktEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWMisorderPktEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWMisorderPktEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWStrayPktEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWStrayPktEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWMalPktEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWMalPktEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWJtrUnrEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWJtrUnrEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWJtrOvrEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWJtrOvrEn.setDescription("Reserved nodes do not support this function temporarily.")
hwCesPWAllEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCesPWAllEn.setDescription("Reserved nodes do not support this function temporarily.")
hwPhysicalPortLosAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortLosAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwPhysicalPortLofAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortLofAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwRsOofAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRsOofAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwRsB1ExcAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRsB1ExcAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwRsB1SdAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRsB1SdAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwRsJ0TimAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRsJ0TimAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsRdiAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsRdiAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsB2ExcAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsB2ExcAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsAuLopAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsAuLopAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsAisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsAisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsB2SdAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsB2SdAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpJ1TimAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpJ1TimAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpUneqAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpUneqAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpRdiAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpRdiAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpB3ExcAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpB3ExcAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpPlmAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpPlmAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpB3SdAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpB3SdAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpAuAisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpAuAisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpTuLopAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpTuLopAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwHpTuLomAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwHpTuLomAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpTimAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpTimAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpUneqAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpUneqAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpRdiAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpRdiAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpBipExcAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpBipExcAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpBipSdAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpBipSdAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpPlmAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpPlmAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpTuAisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpTuAisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwDs1EsExcAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDs1EsExcAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwDs1RmfaAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDs1RmfaAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwDs1LmfaAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDs1LmfaAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwDs1AisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDs1AisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwDs1RdiAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDs1RdiAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwRsLocAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRsLocAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpRfiAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpRfiAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLpV5VcaisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLpV5VcaisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwVc12oofAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVc12oofAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwVc12AlmE1RaiAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVc12AlmE1RaiAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwVc12LfaAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVc12LfaAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwVc12UpE1AisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVc12UpE1AisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwVc12DownE1AisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVc12DownE1AisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwDs1DownE1AisAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDs1DownE1AisAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsLpsUniBiMAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsLpsUniBiMAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsK1K2MAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsK1K2MAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwMsK2MAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMsK2MAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwVc12LmfaAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVc12LmfaAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwSDHAllEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSDHAllEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLaserShutAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLaserShutAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLaserAutoShutAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLaserAutoShutAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLaserAllEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLaserAllEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLoopbackAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoopbackAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwChannelLoopbackAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwChannelLoopbackAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwLoopbackAllEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoopbackAllEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmOcdAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmOcdAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmLcdAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmLcdAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmUhcsAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmUhcsAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmChcsAlarmEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmChcsAlarmEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmPWLosPktEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 69), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmPWLosPktEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmPWMisorderPktEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmPWMisorderPktEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmPWUnknownCellEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmPWUnknownCellEn.setDescription("Reserved nodes do not support this function temporarily.")
hwAtmAllEn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 13, 1, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAtmAllEn.setDescription("Reserved nodes do not support this function temporarily.")
hwPortAlarmThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14))
hwPortAlarmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1))
if mibBuilder.loadTexts: hwPortAlarmThresholdTable.setDescription("Indicates the port alarm threshold.\nThis table lists the port alarm threshold of various interfaces.")
hwPortAlarmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"))
if mibBuilder.loadTexts: hwPortAlarmThresholdEntry.setDescription("Indicates the port alarm threshold.\nThis table lists the threshold of various port alarm.")
hwPhysicalPortThrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwPhysicalPortThrIfIndex.setDescription("Interface index(es) of physical port(s) present on the device.")
hwPhysicalPortThrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortThrName.setDescription("Interface name of physical port(s) present on the device.")
hwPhysicalPortCrcErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortCrcErrorStatistics.setDescription("Crc error statistics value.")
hwPhysicalPortCrcErrorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcErrorHighThreshold.setDescription("Crc error alarm high threshold,default value is 3.")
hwPhysicalPortCrcErrorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcErrorLowThreshold.setDescription("Crc error alarm low threshold,default value is 3.")
hwPhysicalPortCrcErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcErrorInterval.setDescription("Crc error alarm interval time(unit is second),default value is 10s.")
hwPhysicalPortSymbolErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortSymbolErrorStatistics.setDescription("Symbol error statistics value.")
hwPhysicalPortSymbolErrorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSymbolErrorHighThreshold.setDescription("Symbol error alarm high threshold,default value is 3.")
hwPhysicalPortSymbolErrorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSymbolErrorLowThreshold.setDescription("Symbol error alarm low threshold,default value is 3.")
hwPhysicalPortSymbolErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSymbolErrorInterval.setDescription("Symbol error alarm interval time(unit is second),default value is 10s.")
hwPhysicalPortInputErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortInputErrorStatistics.setDescription("Input error statistics value.")
hwPhysicalPortInputErrorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortInputErrorHighThreshold.setDescription("Input error alarm high threshold,default value is 3.")
hwPhysicalPortInputErrorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortInputErrorLowThreshold.setDescription("Input error alarm low threshold,default value is 3.")
hwPhysicalPortInputErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortInputErrorInterval.setDescription("Input error alarm interval time(unit is second),default value is 10s.")
hwPhysicalPortOutputErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortOutputErrorStatistics.setDescription("Output error statistics value.")
hwPhysicalPortOutputErrorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortOutputErrorHighThreshold.setDescription("Output error alarm high threshold,default value is 3.")
hwPhysicalPortOutputErrorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortOutputErrorLowThreshold.setDescription("Output error alarm low threshold,default value is 3.")
hwPhysicalPortOutputErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortOutputErrorInterval.setDescription("Output error alarm interval time(unit is second),default value is 10s.")
hwPhysicalPortSdhErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortSdhErrorStatistics.setDescription("Sdh error statistics value.")
hwPhysicalPortSdhErrorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSdhErrorHighThreshold.setDescription("Sdh error alarm high threshold,default value is 3.")
hwPhysicalPortSdhErrorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSdhErrorLowThreshold.setDescription("Sdh error alarm low threshold,default value is 3.")
hwPhysicalPortSdhErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSdhErrorInterval.setDescription("Sdh error alarm interval time(unit is second),default value is 10s.")
hwPhysicalPortBIP8SDErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortBIP8SDErrorThreshold.setDescription("BIP8-SD error alarm threshold,default value is 6.")
hwPhysicalPortCrcPerAlarmThresholdCoefficient = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerAlarmThresholdCoefficient.setDescription("The coefficient value of CRC-PER(Packet Error Ratio) alarm threshold. The range is 1 to 9.")
hwPhysicalPortCrcPerAlarmThresholdPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerAlarmThresholdPower.setDescription("The power value of CRC-PER(Packet Error Ratio) alarm threshold. The range is 1 to 5.")
hwPhysicalPortCrcPerResumeThresholdCoefficient = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerResumeThresholdCoefficient.setDescription("The coefficient value of CRC-PER(Packet Error Ratio) resume threshold. The range is 1 to 9.")
hwPhysicalPortCrcPerResumeThresholdPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerResumeThresholdPower.setDescription("The power value of CRC-PER(Packet Error Ratio) resume threshold. The range is 1 to 6.")
hwPhysicalPortCrcPerTriggerLsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerTriggerLsp.setDescription("Enalbe or disable the CRC-PER(Packet Error Ratio) result in lsp switchover. The range is 0 to 1.")
hwPhysicalPortCrcPerCurrentValueString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 29), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerCurrentValueString.setDescription("The current value of CRC-PER(Packet Error Ratio).")
hwPhysicalPortCrcPerAlarmThresholdString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 30), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerAlarmThresholdString.setDescription("The alarm threshold of CRC-PER(Packet Error Ratio).")
hwPhysicalPortCrcPerResumeThresholdString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 14, 1, 1, 31), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: hwPhysicalPortCrcPerResumeThresholdString.setDescription("The resume threshold of CRC-PER(Packet Error Ratio).")
hwPortAlarmDownEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15))
hwPortAlarmDownEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1))
if mibBuilder.loadTexts: hwPortAlarmDownEnableTable.setDescription("Enalbe or disable the port alarm result in physics down.\nThis table lists the enable status of various port alarm.")
hwPortAlarmDownEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1)).setIndexNames((0, "HUAWEI-PORT-MIB", "hwPhysicalPortDownIfIndex"))
if mibBuilder.loadTexts: hwPortAlarmDownEnableEntry.setDescription("Enalbe or disable the port alarm result in physics down.\nThis table lists the enable status of various port alarm.")
hwPhysicalPortDownIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 1), InterfaceIndex()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: hwPhysicalPortDownIfIndex.setDescription("Interface index(es) of physical port(s) present on the device.")
hwPhysicalPortDownName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPhysicalPortDownName.setDescription("Interface name of physical port(s) present on the device.")
hwPhysicalPortCrcEnabledDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortCrcEnabledDown.setDescription("Enalbe or disable the crc error alarm result in physics down, and the default value is disable.")
hwPhysicalPortSymbolEnabledDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSymbolEnabledDown.setDescription("Enalbe or disable the symbol error alarm result in physics down, and the default value is disable.")
hwPhysicalPortInputEnabledDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortInputEnabledDown.setDescription("Enalbe or disable the input error alarm result in physics down, and the default value is disable.")
hwPhysicalPortOutputEnabledDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortOutputEnabledDown.setDescription("Enalbe or disable the output error alarm result in physics down, and the default value is disable.")
hwPhysicalPortSdhEnabledDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortSdhEnabledDown.setDescription("Enalbe or disable the sdh error alarm result in physics down, and the default value is disable.")
hwPhysicalPortBip8SdEnabledDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 1, 15, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPhysicalPortBip8SdEnabledDown.setDescription("Enalbe or disable the BIP8-SD error alarm result in physics down, and the default value is disable.")
hwPortNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2))
hwDslImaGroupTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 2))
hwDslImaLinkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3))
hwDslLinkTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 4))
hwPortAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157))
hwPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11))
hwPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 1))
hwPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2))
hwPortAlarmTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 25))

# Augmentions

# Notifications

hwPortACRMasterPWChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 1)).setObjects(*(("HUAWEI-PORT-MIB", "hwDs0ChannelBundleDs1ChannelId"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleMasterPWStatus"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundlePortName"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleParentIfIndex"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleIsMasterPW"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleId"), ) )
if mibBuilder.loadTexts: hwPortACRMasterPWChange.setDescription("CES-ACR master PW change notification,indicates master pw change or master pw status change,this may happen when a\npw is deleted or the pw status change.")
hwDslImaGroupLEDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 2, 1)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaGroupLEDown.setDescription("The ima group local edge down notification.")
hwDslImaGroupLEUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 2, 2)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaGroupLEUp.setDescription("The ima group local edge up notification.")
hwDslImaGroupREDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 2, 3)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaGroupREDown.setDescription("The ima group remote edge down notification.")
hwDslImaGroupREUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 2, 4)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaGroupREUp.setDescription("The ima group remote edge up notification.")
hwDslImaLinkLif = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 1)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkLif.setDescription("The ima link lif notification.")
hwDslImaLinkLifResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 2)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkLifResume.setDescription("The ima link lif resume notification.")
hwDslImaLinkLods = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 3)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkLods.setDescription("The ima link lods notification.")
hwDslImaLinkLodsResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 4)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkLodsResume.setDescription("The ima link lods resume notification.")
hwDslImaLinkRfi = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 5)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkRfi.setDescription("The ima link rfi notification.")
hwDslImaLinkRfiResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 6)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkRfiResume.setDescription("The ima link rfi resume notification.")
hwDslImaLinkReTxUnusable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 7)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkReTxUnusable.setDescription("The ima link remote tx unusable notification.")
hwDslImaLinkReTxUsable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 8)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkReTxUsable.setDescription("The ima link remote tx usable notification.")
hwDslImaLinkReRxUnusable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 9)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkReRxUnusable.setDescription("The ima link remote rx unusable notification.")
hwDslImaLinkReRxUsable = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 3, 10)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ) )
if mibBuilder.loadTexts: hwDslImaLinkReRxUsable.setDescription("The ima link remote tx usable notification.")
hwDslLinkFrameLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 4, 1)).setObjects(*(("HUAWEI-PORT-MIB", "hwBoundDslGroupIfIndex"), ("HUAWEI-PORT-MIB", "hwBoundDslGroupIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ) )
if mibBuilder.loadTexts: hwDslLinkFrameLost.setDescription("The dsl link frame lost notification.")
hwDslLinkFrameResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 4, 2)).setObjects(*(("HUAWEI-PORT-MIB", "hwBoundDslGroupIfIndex"), ("HUAWEI-PORT-MIB", "hwBoundDslGroupIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ) )
if mibBuilder.loadTexts: hwDslLinkFrameResume.setDescription("The dsl link frame resume notification.")
hwDslLinkSignalLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 4, 3)).setObjects(*(("HUAWEI-PORT-MIB", "hwBoundDslGroupIfIndex"), ("HUAWEI-PORT-MIB", "hwBoundDslGroupIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ) )
if mibBuilder.loadTexts: hwDslLinkSignalLost.setDescription("The dsl link signal lost notification.")
hwDslLinkSignalResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 4, 4)).setObjects(*(("HUAWEI-PORT-MIB", "hwBoundDslGroupIfIndex"), ("HUAWEI-PORT-MIB", "hwBoundDslGroupIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ) )
if mibBuilder.loadTexts: hwDslLinkSignalResume.setDescription("The dsl link signal resume notification.")
hwCesPwRemoteLosPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 5)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesPwRemoteLosPktAlarm.setDescription("Indicates the alarm is detected.")
hwCesPwRemoteLosPktAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 6)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesPwRemoteLosPktAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesPwOppositeRai = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 7)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesPwOppositeRai.setDescription("Indicates the alarm is detected.")
hwCesPwOppositeRaiResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 8)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesPwOppositeRaiResume.setDescription("Indicates the alarm is cleared.")
hwLosAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 9)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLosAlarm.setDescription("Indicates the alarm is detected.")
hwLosAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 10)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLosAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLofAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 11)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLofAlarm.setDescription("Indicates the alarm is detected.")
hwLofAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 12)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLofAlarmResume.setDescription("Indicates the alarm is cleared.")
hwOofAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 13)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwOofAlarm.setDescription("Indicates the alarm is detected.")
hwOofAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 14)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwOofAlarmResume.setDescription("Indicates the alarm is cleared.")
hwB1TcaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 15)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwB1TcaAlarm.setDescription("Indicates the alarm is detected.")
hwB1TcaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 16)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwB1TcaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwB2TcaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 17)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwB2TcaAlarm.setDescription("Indicates the alarm is detected.")
hwB2TcaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 18)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwB2TcaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwJ0TimAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 19)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwJ0TimAlarm.setDescription("Indicates the alarm is detected.")
hwJ0TimAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 20)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwJ0TimAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLrdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 21)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLrdiAlarm.setDescription("Indicates the alarm is detected.")
hwLrdiAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 22)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLrdiAlarmResume.setDescription("Indicates the alarm is cleared.")
hwSfbereAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 23)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwSfbereAlarm.setDescription("Indicates the alarm is detected.")
hwSfbereAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 24)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwSfbereAlarmResume.setDescription("Indicates the alarm is cleared.")
hwAuLopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 25)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwAuLopAlarm.setDescription("Indicates the alarm is detected.")
hwAuLopAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 26)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwAuLopAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLaisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 27)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLaisAlarm.setDescription("Indicates the alarm is detected.")
hwLaisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 28)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLaisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwSdbereAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 29)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwSdbereAlarm.setDescription("Indicates the alarm is detected.")
hwSdbereAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 30)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwSdbereAlarmResume.setDescription("Indicates the alarm is cleared.")
hwPtimAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 31)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPtimAlarm.setDescription("Indicates the alarm is detected.")
hwPtimAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 32)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPtimAlarmResume.setDescription("Indicates the alarm is cleared.")
hwPuneqAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 33)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPuneqAlarm.setDescription("Indicates the alarm is detected.")
hwPuneqAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 34)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPuneqAlarmResume.setDescription("Indicates the alarm is cleared.")
hwPrdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 35)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPrdiAlarm.setDescription("Indicates the alarm is detected.")
hwPrdiAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 36)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPrdiAlarmResume.setDescription("Indicates the alarm is cleared.")
hwB3TcaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 37)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwB3TcaAlarm.setDescription("Indicates the alarm is detected.")
hwB3TcaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 38)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwB3TcaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwPplmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 39)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPplmAlarm.setDescription("Indicates the alarm is detected.")
hwPplmAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 40)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPplmAlarmResume.setDescription("Indicates the alarm is cleared.")
hwPaisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 41)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPaisAlarm.setDescription("Indicates the alarm is detected.")
hwPaisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 42)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwPaisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwAuAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 43)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwAuAisAlarm.setDescription("Indicates the alarm is detected.")
hwAuAisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 44)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwAuAisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwVlopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 45)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwVlopAlarm.setDescription("Indicates the alarm is detected.")
hwVlopAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 46)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwVlopAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLomAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 47)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLomAlarm.setDescription("Indicates the alarm is detected.")
hwLomAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 48)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLomAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLpTimVc12Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 49)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLpTimVc12Alarm.setDescription("Indicates the alarm is detected.")
hwLpTimVc12AlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 50)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLpTimVc12AlarmResume.setDescription("Indicates the alarm is cleared.")
hwLpUneqVc12Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 51)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLpUneqVc12Alarm.setDescription("Indicates the alarm is detected.")
hwLpUneqVc12AlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 52)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLpUneqVc12AlarmResume.setDescription("Indicates the alarm is cleared.")
hwVrdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 53)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwVrdiAlarm.setDescription("Indicates the alarm is detected.")
hwVrdiAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 54)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwVrdiAlarmResume.setDescription("Indicates the alarm is cleared.")
hwBip2TcaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 57)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwBip2TcaAlarm.setDescription("Indicates the alarm is detected.")
hwBip2TcaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 58)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwBip2TcaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLpSlmVc12Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 59)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLpSlmVc12Alarm.setDescription("Indicates the alarm is detected.")
hwLpSlmVc12AlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 60)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwLpSlmVc12AlarmResume.setDescription("Indicates the alarm is cleared.")
hwTuAisVc12Alarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 61)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwTuAisVc12Alarm.setDescription("Indicates the alarm is detected.")
hwTuAisVc12AlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 62)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwTuAisVc12AlarmResume.setDescription("Indicates the alarm is cleared.")
hwE1EsTcaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 63)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1EsTcaAlarm.setDescription("Indicates the alarm is detected.")
hwE1EsTcaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 64)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1EsTcaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwE1LmfaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 67)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1LmfaAlarm.setDescription("Indicates the alarm is detected.")
hwE1LmfaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 68)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1LmfaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwE1UpE1AisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 69)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1UpE1AisAlarm.setDescription("Indicates the alarm is detected.")
hwE1UpE1AisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 70)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1UpE1AisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwE1AlmE1RaiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 71)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1AlmE1RaiAlarm.setDescription("Indicates the alarm is detected.")
hwE1AlmE1RaiAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 72)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1AlmE1RaiAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesPwOppositeAcFault = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 73)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesPwOppositeAcFault.setDescription("Indicates the alarm is detected.")
hwCesPwOppositeAcFaultResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 74)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesPwOppositeAcFaultResume.setDescription("Indicates the alarm is cleared.")
hwCesLosPktExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 75)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesLosPktExcAlarm.setDescription("Indicates the alarm is detected.")
hwCesLosPktExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 76)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesLosPktExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesMisorderPktExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 77)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesMisorderPktExcAlarm.setDescription("Indicates the alarm is detected.")
hwCesMisorderPktExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 78)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesMisorderPktExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesStrayPktExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 79)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesStrayPktExcAlarm.setDescription("Indicates the alarm is detected.")
hwCesStrayPktExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 80)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesStrayPktExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesMalPktExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 81)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesMalPktExcAlarm.setDescription("Indicates the alarm is detected.")
hwCesMalPktExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 82)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesMalPktExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesJtrUdrExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 83)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesJtrUdrExcAlarm.setDescription("Indicates the alarm is detected.")
hwCesJtrUdrExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 84)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesJtrUdrExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesJtrOvrExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 85)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesJtrOvrExcAlarm.setDescription("Indicates the alarm is detected.")
hwCesJtrOvrExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 86)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesJtrOvrExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwRroolAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 87)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwRroolAlarm.setDescription("Indicates the alarm is detected.")
hwRroolAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 88)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwRroolAlarmResume.setDescription("Indicates the alarm is cleared.")
hwVrfiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 89)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwVrfiAlarm.setDescription("Indicates the alarm is detected.")
hwVrfiAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 90)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwVrfiAlarmResume.setDescription("Indicates the alarm is cleared.")
hwV5VcaisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 91)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwV5VcaisAlarm.setDescription("Indicates the alarm is detected.")
hwV5VcaisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 92)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwV5VcaisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCposE1AlmE1RaiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 95)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1AlmE1RaiAlarm.setDescription("Indicates the alarm is detected.")
hwCposE1AlmE1RaiAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 96)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1AlmE1RaiAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCposE1LfaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 97)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1LfaAlarm.setDescription("Indicates the alarm is detected.")
hwCposE1LfaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 98)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1LfaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCposE1UpE1AisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 99)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1UpE1AisAlarm.setDescription("Indicates the alarm is detected.")
hwCposE1UpE1AisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 100)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1UpE1AisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCposE1DownE1AisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 101)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1DownE1AisAlarm.setDescription("Indicates the alarm is detected.")
hwCposE1DownE1AisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 102)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1DownE1AisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwE1DownE1AisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 103)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1DownE1AisAlarm.setDescription("Indicates the alarm is detected.")
hwE1DownE1AisAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 104)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwE1DownE1AisAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCposE1LmfaAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 111)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1LmfaAlarm.setDescription("Indicates the alarm is detected.")
hwCposE1LmfaAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 112)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPortPhysicalLpIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwCposE1LmfaAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLaserShutAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 113)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLaserShutAlarm.setDescription("Indicates the alarm is detected.")
hwLaserShutAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 114)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLaserShutAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLaserAutoShutAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 115)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLaserAutoShutAlarm.setDescription("Indicates the alarm is detected.")
hwLaserAutoShutAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 116)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLaserAutoShutAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLoopbackAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 117)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalLoopbackType"), ) )
if mibBuilder.loadTexts: hwLoopbackAlarm.setDescription("Indicates the alarm is detected.")
hwLoopbackAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 118)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalLoopbackType"), ) )
if mibBuilder.loadTexts: hwLoopbackAlarmResume.setDescription("Indicates the alarm is cleared.")
hwOcdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 119)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwOcdAlarm.setDescription("Indicates the alarm is detected.")
hwOcdAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 120)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwOcdAlarmResume.setDescription("Indicates the alarm is cleared.")
hwLcdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 121)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLcdAlarm.setDescription("Indicates the alarm is detected.")
hwLcdAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 122)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwLcdAlarmResume.setDescription("Indicates the alarm is cleared.")
hwUhcsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 123)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwUhcsAlarm.setDescription("Indicates the alarm is detected.")
hwUhcsAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 124)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwUhcsAlarmResume.setDescription("Indicates the alarm is cleared.")
hwChcsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 125)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwChcsAlarm.setDescription("Indicates the alarm is detected.")
hwChcsAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 126)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwChcsAlarmResume.setDescription("Indicates the alarm is cleared.")
hwChannelLoopbackAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 127)).setObjects(*(("HUAWEI-PORT-MIB", "hwSDHLpPerfCurrentIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalLoopbackType"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwSDHHpPerfCurrentIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortIfIndex"), ) )
if mibBuilder.loadTexts: hwChannelLoopbackAlarm.setDescription("Indicates the alarm is detected.")
hwChannelLoopbackAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 128)).setObjects(*(("HUAWEI-PORT-MIB", "hwSDHLpPerfCurrentIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalLoopbackType"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwSDHHpPerfCurrentIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortIfIndex"), ) )
if mibBuilder.loadTexts: hwChannelLoopbackAlarmResume.setDescription("Indicates the alarm is cleared.")
hwCesLopsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 129)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesLopsAlarm.setDescription("Indicates the alarm is detected.")
hwCesLopsAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 130)).setObjects(*(("HUAWEI-PORT-MIB", "hwPWCesVcID"), ("HUAWEI-PORT-MIB", "hwPWPortName"), ("HUAWEI-PORT-MIB", "hwPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwPWCesVcType"), ) )
if mibBuilder.loadTexts: hwCesLopsAlarmResume.setDescription("Indicates the alarm is cleared.")
hwAtmPwLosPktExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 131)).setObjects(*(("HUAWEI-PORT-MIB", "hwAtmPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwAtmPWPortName"), ("HUAWEI-PORT-MIB", "hwAtmVcType"), ("HUAWEI-PORT-MIB", "hwAtmVcID"), ) )
if mibBuilder.loadTexts: hwAtmPwLosPktExcAlarm.setDescription("Indicates the alarm is detected.")
hwAtmPwLosPktExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 132)).setObjects(*(("HUAWEI-PORT-MIB", "hwAtmPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwAtmPWPortName"), ("HUAWEI-PORT-MIB", "hwAtmVcType"), ("HUAWEI-PORT-MIB", "hwAtmVcID"), ) )
if mibBuilder.loadTexts: hwAtmPwLosPktExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwAtmPwMisorderPktExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 133)).setObjects(*(("HUAWEI-PORT-MIB", "hwAtmPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwAtmPWPortName"), ("HUAWEI-PORT-MIB", "hwAtmVcType"), ("HUAWEI-PORT-MIB", "hwAtmVcID"), ) )
if mibBuilder.loadTexts: hwAtmPwMisorderPktExcAlarm.setDescription("Indicates the alarm is detected.")
hwAtmPwMisorderPktExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 134)).setObjects(*(("HUAWEI-PORT-MIB", "hwAtmPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwAtmPWPortName"), ("HUAWEI-PORT-MIB", "hwAtmVcType"), ("HUAWEI-PORT-MIB", "hwAtmVcID"), ) )
if mibBuilder.loadTexts: hwAtmPwMisorderPktExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwAtmPwUnknownCellExcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 135)).setObjects(*(("HUAWEI-PORT-MIB", "hwAtmPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwAtmPWPortName"), ("HUAWEI-PORT-MIB", "hwAtmVcType"), ("HUAWEI-PORT-MIB", "hwAtmVcID"), ) )
if mibBuilder.loadTexts: hwAtmPwUnknownCellExcAlarm.setDescription("Indicates the alarm is detected.")
hwAtmPwUnknownCellExcAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 136)).setObjects(*(("HUAWEI-PORT-MIB", "hwAtmPeerIpAddr"), ("HUAWEI-PORT-MIB", "hwAtmPWPortName"), ("HUAWEI-PORT-MIB", "hwAtmVcType"), ("HUAWEI-PORT-MIB", "hwAtmVcID"), ) )
if mibBuilder.loadTexts: hwAtmPwUnknownCellExcAlarmResume.setDescription("Indicates the alarm is cleared.")
hwInputErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 153)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwInputErrorAlarm.setDescription("The port input errors notification.")
hwInputErrorAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 154)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwInputErrorAlarmResume.setDescription("The port input errors resume notification.")
hwOutputErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 155)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwOutputErrorAlarm.setDescription("The port output errors notification.")
hwOutputErrorAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 156)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ) )
if mibBuilder.loadTexts: hwOutputErrorAlarmResume.setDescription("The port output errors resume notification.")
hwPhysicalPortCrcError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 1)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorLowThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortCrcError.setDescription("Port Crc error alarm notification.")
hwPhysicalPortCrcErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 2)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorLowThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortCrcErrorResume.setDescription("Port Crc error alarm resume.")
hwPhysicalPortSymbolError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 3)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorLowThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortSymbolError.setDescription("Port Symbol error alarm notification.")
hwPhysicalPortSymbolErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 4)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorLowThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortSymbolErrorResume.setDescription("Port Symbol error alarm resume.")
hwPhysicalPortSdhError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 5)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorLowThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorHighThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortSdhError.setDescription("Port Sdh error alarm notification.")
hwPhysicalPortSdhErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 6)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorLowThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorHighThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortSdhErrorResume.setDescription("Port Sdh error alarm resume.")
hwPhysicalPortBip8SdError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 7)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortBIP8SDErrorThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortBip8SdError.setDescription("Port BIP8 Signal Degrade alarm notification.")
hwPhysicalPortBip8SdErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 8)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortBIP8SDErrorThreshold"), ) )
if mibBuilder.loadTexts: hwPhysicalPortBip8SdErrorResume.setDescription("Port BIP8 Signal Degrade alarm resume.")
hwPhysicalPortCrcPacketErrorRatio = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 9)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcPerAlarmThresholdString"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcPerResumeThresholdString"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcPerCurrentValueString"), ) )
if mibBuilder.loadTexts: hwPhysicalPortCrcPacketErrorRatio.setDescription("Port CRC-PER(Packet Error Ratio) alarm notification.")
hwPhysicalPortCrcPacketErrorRatioResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 157, 10)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortThrIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortThrName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcPerAlarmThresholdString"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcPerResumeThresholdString"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcPerCurrentValueString"), ) )
if mibBuilder.loadTexts: hwPhysicalPortCrcPacketErrorRatioResume.setDescription("Port CRC-PER(Packet Error Ratio) alarm resume notification.")
hwLoopBackAutoClearNotice = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 160)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ) )
if mibBuilder.loadTexts: hwLoopBackAutoClearNotice.setDescription("set port undo loopback while set loopback autoclear enable when time out.")
hwChannelLoopBackAutoClearNotice = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 161)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortIfIndex"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwDs1ChannelId"), ) )
if mibBuilder.loadTexts: hwChannelLoopBackAutoClearNotice.setDescription("set channel undo loopback while set loopback autoclear enable when time out.")
hwHpJ1TiuAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 162)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwHpJ1TiuAlarm.setDescription("Trace Identifier Unstable in the Higher order Path.")
hwHpJ1TiuAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 163)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortInSlot"), ("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInPort"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInCard"), ("HUAWEI-PORT-MIB", "hwPortPhysicalHpIndex"), ) )
if mibBuilder.loadTexts: hwHpJ1TiuAlarmResume.setDescription("Trace Identifier Unstable in the Higher order Path alarm resume.")
hwPortAlarmInverseAutoRecover = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 2, 164)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortName"), ) )
if mibBuilder.loadTexts: hwPortAlarmInverseAutoRecover.setDescription("Port alarm inverse auto recover.")

# Groups

hwEthernetObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 1)).setObjects(*(("HUAWEI-PORT-MIB", "hwEthernetFlagJ0Trace"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ1Mode"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ1Value"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ0Mode"), ("HUAWEI-PORT-MIB", "hwEthernetDuplex"), ("HUAWEI-PORT-MIB", "hwEthernetFlagC2Value"), ("HUAWEI-PORT-MIB", "hwEthernetPortMode"), ("HUAWEI-PORT-MIB", "hwEthernetClock"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ0Value"), ("HUAWEI-PORT-MIB", "hwEthernetUpHoldTime"), ("HUAWEI-PORT-MIB", "hwEthernetFlagJ1Trace"), ("HUAWEI-PORT-MIB", "hwEthernetPortTypeOperate"), ("HUAWEI-PORT-MIB", "hwEthernetPortType"), ("HUAWEI-PORT-MIB", "hwEthernetSubinterfaceStatisticEnable"), ("HUAWEI-PORT-MIB", "hwEthernetJumboframeMaxLength"), ("HUAWEI-PORT-MIB", "hwEthernetSpeedSet"), ("HUAWEI-PORT-MIB", "hwEthernetNegotiation"), ("HUAWEI-PORT-MIB", "hwEthernetDownHoldTime"), ("HUAWEI-PORT-MIB", "hwEthernetComboType"), ("HUAWEI-PORT-MIB", "hwEthernetLoopback"), ) )
if mibBuilder.loadTexts: hwEthernetObjectGroup.setDescription("The Port attribute group.")
hwPosObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 2)).setObjects(*(("HUAWEI-PORT-MIB", "hwPosFlagJ1Mode"), ("HUAWEI-PORT-MIB", "hwPosClock"), ("HUAWEI-PORT-MIB", "hwPosFlagJ0Value"), ("HUAWEI-PORT-MIB", "hwPosFrameFormat"), ("HUAWEI-PORT-MIB", "hwPosFlagC2Value"), ("HUAWEI-PORT-MIB", "hwPosLinkProtocol"), ("HUAWEI-PORT-MIB", "hwPosScramble"), ("HUAWEI-PORT-MIB", "hwPosFlagJ0Mode"), ("HUAWEI-PORT-MIB", "hwPosFlagJ1Value"), ("HUAWEI-PORT-MIB", "hwPosLoopback"), ("HUAWEI-PORT-MIB", "hwPosFlagJ1Trace"), ("HUAWEI-PORT-MIB", "hwPosCrcVerifyCode"), ("HUAWEI-PORT-MIB", "hwPosFlagJ0Trace"), ) )
if mibBuilder.loadTexts: hwPosObjectGroup.setDescription("The Port attribute group.")
hwCposObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 3)).setObjects(*(("HUAWEI-PORT-MIB", "hwCposMultiplex"), ("HUAWEI-PORT-MIB", "hwCposMappingMode"), ("HUAWEI-PORT-MIB", "hwCposFlagC2Value"), ("HUAWEI-PORT-MIB", "hwCposFlagJ0Value"), ("HUAWEI-PORT-MIB", "hwCposB1ExcAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposB1SdAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposFlagJ1Value"), ("HUAWEI-PORT-MIB", "hwCposB2SdAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposB3ExcAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposFlagJ0Mode"), ("HUAWEI-PORT-MIB", "hwCposLpBipSdAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposFlagJ1Trace"), ("HUAWEI-PORT-MIB", "hwCposFlagJ1Mode"), ("HUAWEI-PORT-MIB", "hwCposLoopback"), ("HUAWEI-PORT-MIB", "hwCposLpBipExcAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposClock"), ("HUAWEI-PORT-MIB", "hwCposHighPathNumber"), ("HUAWEI-PORT-MIB", "hwCposFrameFormat"), ("HUAWEI-PORT-MIB", "hwCposLowPathNumber"), ("HUAWEI-PORT-MIB", "hwCposB3SdAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposB2ExcAlarmThreshold"), ("HUAWEI-PORT-MIB", "hwCposIfType"), ("HUAWEI-PORT-MIB", "hwCposFlagJ0Trace"), ) )
if mibBuilder.loadTexts: hwCposObjectGroup.setDescription("The Port attribute group.")
hwDs0ChannelBundleObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 4)).setObjects(*(("HUAWEI-PORT-MIB", "hwDs0ChannelBundleMasterPWStatus"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleTimeSlots"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundlePortName"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleIsMasterPW"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleRowStatus"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleIfIndex"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleSpeed"), ) )
if mibBuilder.loadTexts: hwDs0ChannelBundleObjectGroup.setDescription("The Port attribute group.")
hwDs1ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 5)).setObjects(*(("HUAWEI-PORT-MIB", "hwDs1Channelized"), ("HUAWEI-PORT-MIB", "hwDs1CodeType"), ("HUAWEI-PORT-MIB", "hwDs1Loopback"), ("HUAWEI-PORT-MIB", "hwDs1PWClockDomain"), ("HUAWEI-PORT-MIB", "hwDs1FrameFormat"), ("HUAWEI-PORT-MIB", "hwDs1IfType"), ("HUAWEI-PORT-MIB", "hwDs1ClockRecoveryDomain"), ("HUAWEI-PORT-MIB", "hwDs1WorkMode"), ("HUAWEI-PORT-MIB", "hwDs1ChannelType"), ("HUAWEI-PORT-MIB", "hwDs1Cable"), ("HUAWEI-PORT-MIB", "hwDs1RowStatus"), ("HUAWEI-PORT-MIB", "hwDs1Clock"), ) )
if mibBuilder.loadTexts: hwDs1ObjectGroup.setDescription("The Port attribute group.")
hwDs3ObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 6)).setObjects(*(("HUAWEI-PORT-MIB", "hwDs3ChannelType"), ("HUAWEI-PORT-MIB", "hwDs3Clock"), ("HUAWEI-PORT-MIB", "hwDs3Cable"), ("HUAWEI-PORT-MIB", "hwDs3IfType"), ("HUAWEI-PORT-MIB", "hwDs3FrameFormat"), ("HUAWEI-PORT-MIB", "hwDs3RowStatus"), ("HUAWEI-PORT-MIB", "hwDs3Loopback"), ("HUAWEI-PORT-MIB", "hwDs3CreateSerial"), ("HUAWEI-PORT-MIB", "hwDs3Channelized"), ("HUAWEI-PORT-MIB", "hwDs3NationalBit"), ("HUAWEI-PORT-MIB", "hwDs3Scramble"), ) )
if mibBuilder.loadTexts: hwDs3ObjectGroup.setDescription("The Port attribute group.")
hwBundleSerialObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 7)).setObjects(*(("HUAWEI-PORT-MIB", "hwBundleSerialCrcVerifyCode"), ("HUAWEI-PORT-MIB", "hwBundleSerialTimerHold"), ("HUAWEI-PORT-MIB", "hwBundleSerialLinkProtocol"), ("HUAWEI-PORT-MIB", "hwBundleSerialLoopback"), ) )
if mibBuilder.loadTexts: hwBundleSerialObjectGroup.setDescription("The Port attribute group.")
hwPortNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 8)).setObjects(*(("HUAWEI-PORT-MIB", "hwCposE1AlmE1RaiAlarmResume"), ("HUAWEI-PORT-MIB", "hwLaserAutoShutAlarm"), ("HUAWEI-PORT-MIB", "hwLosAlarmResume"), ("HUAWEI-PORT-MIB", "hwHpJ1TiuAlarmResume"), ("HUAWEI-PORT-MIB", "hwCposE1LmfaAlarm"), ("HUAWEI-PORT-MIB", "hwE1DownE1AisAlarm"), ("HUAWEI-PORT-MIB", "hwCesJtrUdrExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwAtmPwMisorderPktExcAlarm"), ("HUAWEI-PORT-MIB", "hwAuAisAlarmResume"), ("HUAWEI-PORT-MIB", "hwLoopbackAlarmResume"), ("HUAWEI-PORT-MIB", "hwSdbereAlarm"), ("HUAWEI-PORT-MIB", "hwLofAlarm"), ("HUAWEI-PORT-MIB", "hwPortACRMasterPWChange"), ("HUAWEI-PORT-MIB", "hwCposE1UpE1AisAlarmResume"), ("HUAWEI-PORT-MIB", "hwPrdiAlarmResume"), ("HUAWEI-PORT-MIB", "hwPtimAlarmResume"), ("HUAWEI-PORT-MIB", "hwTuAisVc12AlarmResume"), ("HUAWEI-PORT-MIB", "hwCposE1AlmE1RaiAlarm"), ("HUAWEI-PORT-MIB", "hwLaserShutAlarm"), ("HUAWEI-PORT-MIB", "hwCesPwOppositeRaiResume"), ("HUAWEI-PORT-MIB", "hwCesLosPktExcAlarm"), ("HUAWEI-PORT-MIB", "hwSfbereAlarm"), ("HUAWEI-PORT-MIB", "hwE1AlmE1RaiAlarm"), ("HUAWEI-PORT-MIB", "hwCposE1DownE1AisAlarmResume"), ("HUAWEI-PORT-MIB", "hwAtmPwLosPktExcAlarm"), ("HUAWEI-PORT-MIB", "hwCposE1LfaAlarm"), ("HUAWEI-PORT-MIB", "hwLpUneqVc12AlarmResume"), ("HUAWEI-PORT-MIB", "hwLcdAlarm"), ("HUAWEI-PORT-MIB", "hwE1DownE1AisAlarmResume"), ("HUAWEI-PORT-MIB", "hwE1UpE1AisAlarmResume"), ("HUAWEI-PORT-MIB", "hwHpJ1TiuAlarm"), ("HUAWEI-PORT-MIB", "hwJ0TimAlarmResume"), ("HUAWEI-PORT-MIB", "hwAuAisAlarm"), ("HUAWEI-PORT-MIB", "hwLaserShutAlarmResume"), ("HUAWEI-PORT-MIB", "hwCesPwOppositeRai"), ("HUAWEI-PORT-MIB", "hwLpTimVc12AlarmResume"), ("HUAWEI-PORT-MIB", "hwTuAisVc12Alarm"), ("HUAWEI-PORT-MIB", "hwChannelLoopbackAlarmResume"), ("HUAWEI-PORT-MIB", "hwCesMisorderPktExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwLrdiAlarm"), ("HUAWEI-PORT-MIB", "hwB2TcaAlarmResume"), ("HUAWEI-PORT-MIB", "hwLaserAutoShutAlarmResume"), ("HUAWEI-PORT-MIB", "hwE1UpE1AisAlarm"), ("HUAWEI-PORT-MIB", "hwLpTimVc12Alarm"), ("HUAWEI-PORT-MIB", "hwE1EsTcaAlarmResume"), ("HUAWEI-PORT-MIB", "hwAtmPwLosPktExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwV5VcaisAlarm"), ("HUAWEI-PORT-MIB", "hwCposE1DownE1AisAlarm"), ("HUAWEI-PORT-MIB", "hwE1EsTcaAlarm"), ("HUAWEI-PORT-MIB", "hwUhcsAlarmResume"), ("HUAWEI-PORT-MIB", "hwB1TcaAlarmResume"), ("HUAWEI-PORT-MIB", "hwPortAlarmInverseAutoRecover"), ("HUAWEI-PORT-MIB", "hwLpSlmVc12AlarmResume"), ("HUAWEI-PORT-MIB", "hwLpUneqVc12Alarm"), ("HUAWEI-PORT-MIB", "hwAuLopAlarmResume"), ("HUAWEI-PORT-MIB", "hwAtmPwUnknownCellExcAlarm"), ("HUAWEI-PORT-MIB", "hwCesPwOppositeAcFault"), ("HUAWEI-PORT-MIB", "hwCesJtrOvrExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwVrfiAlarmResume"), ("HUAWEI-PORT-MIB", "hwLaisAlarm"), ("HUAWEI-PORT-MIB", "hwCposE1UpE1AisAlarm"), ("HUAWEI-PORT-MIB", "hwCesLopsAlarmResume"), ("HUAWEI-PORT-MIB", "hwUhcsAlarm"), ("HUAWEI-PORT-MIB", "hwVlopAlarm"), ("HUAWEI-PORT-MIB", "hwOofAlarm"), ("HUAWEI-PORT-MIB", "hwCesMalPktExcAlarm"), ("HUAWEI-PORT-MIB", "hwOcdAlarm"), ("HUAWEI-PORT-MIB", "hwChcsAlarm"), ("HUAWEI-PORT-MIB", "hwRroolAlarm"), ("HUAWEI-PORT-MIB", "hwB2TcaAlarm"), ("HUAWEI-PORT-MIB", "hwCesMisorderPktExcAlarm"), ("HUAWEI-PORT-MIB", "hwRroolAlarmResume"), ("HUAWEI-PORT-MIB", "hwLpSlmVc12Alarm"), ("HUAWEI-PORT-MIB", "hwPuneqAlarmResume"), ("HUAWEI-PORT-MIB", "hwPaisAlarmResume"), ("HUAWEI-PORT-MIB", "hwCesPwOppositeAcFaultResume"), ("HUAWEI-PORT-MIB", "hwV5VcaisAlarmResume"), ("HUAWEI-PORT-MIB", "hwPplmAlarm"), ("HUAWEI-PORT-MIB", "hwLofAlarmResume"), ("HUAWEI-PORT-MIB", "hwLaisAlarmResume"), ("HUAWEI-PORT-MIB", "hwCesStrayPktExcAlarm"), ("HUAWEI-PORT-MIB", "hwCesMalPktExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwE1AlmE1RaiAlarmResume"), ("HUAWEI-PORT-MIB", "hwVlopAlarmResume"), ("HUAWEI-PORT-MIB", "hwE1LmfaAlarmResume"), ("HUAWEI-PORT-MIB", "hwAuLopAlarm"), ("HUAWEI-PORT-MIB", "hwLoopbackAlarm"), ("HUAWEI-PORT-MIB", "hwVrdiAlarm"), ("HUAWEI-PORT-MIB", "hwLrdiAlarmResume"), ("HUAWEI-PORT-MIB", "hwPaisAlarm"), ("HUAWEI-PORT-MIB", "hwCesJtrUdrExcAlarm"), ("HUAWEI-PORT-MIB", "hwCposE1LmfaAlarmResume"), ("HUAWEI-PORT-MIB", "hwPrdiAlarm"), ("HUAWEI-PORT-MIB", "hwPtimAlarm"), ("HUAWEI-PORT-MIB", "hwOofAlarmResume"), ("HUAWEI-PORT-MIB", "hwPuneqAlarm"), ("HUAWEI-PORT-MIB", "hwB3TcaAlarmResume"), ("HUAWEI-PORT-MIB", "hwCesPwRemoteLosPktAlarmResume"), ("HUAWEI-PORT-MIB", "hwVrfiAlarm"), ("HUAWEI-PORT-MIB", "hwLomAlarm"), ("HUAWEI-PORT-MIB", "hwAtmPwUnknownCellExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwB3TcaAlarm"), ("HUAWEI-PORT-MIB", "hwCesStrayPktExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwLcdAlarmResume"), ("HUAWEI-PORT-MIB", "hwSfbereAlarmResume"), ("HUAWEI-PORT-MIB", "hwAtmPwMisorderPktExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwBip2TcaAlarmResume"), ("HUAWEI-PORT-MIB", "hwBip2TcaAlarm"), ("HUAWEI-PORT-MIB", "hwCesLopsAlarm"), ("HUAWEI-PORT-MIB", "hwE1LmfaAlarm"), ("HUAWEI-PORT-MIB", "hwCesPwRemoteLosPktAlarm"), ("HUAWEI-PORT-MIB", "hwChannelLoopbackAlarm"), ("HUAWEI-PORT-MIB", "hwCposE1LfaAlarmResume"), ("HUAWEI-PORT-MIB", "hwVrdiAlarmResume"), ("HUAWEI-PORT-MIB", "hwChcsAlarmResume"), ("HUAWEI-PORT-MIB", "hwCesJtrOvrExcAlarm"), ("HUAWEI-PORT-MIB", "hwJ0TimAlarm"), ("HUAWEI-PORT-MIB", "hwOcdAlarmResume"), ("HUAWEI-PORT-MIB", "hwCesLosPktExcAlarmResume"), ("HUAWEI-PORT-MIB", "hwB1TcaAlarm"), ("HUAWEI-PORT-MIB", "hwPplmAlarmResume"), ("HUAWEI-PORT-MIB", "hwLosAlarm"), ("HUAWEI-PORT-MIB", "hwLomAlarmResume"), ("HUAWEI-PORT-MIB", "hwSdbereAlarmResume"), ) )
if mibBuilder.loadTexts: hwPortNotificationsGroup.setDescription("This is the group of port notifiction.")
hwDslGroupObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 9)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslGroupBisState"), ("HUAWEI-PORT-MIB", "hwDslGroupEnable"), ("HUAWEI-PORT-MIB", "hwDslGroupIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupRowStatus"), ("HUAWEI-PORT-MIB", "hwDslGroupEncapeMode"), ("HUAWEI-PORT-MIB", "hwDslGroupVpi"), ("HUAWEI-PORT-MIB", "hwBoundVeRowStatus"), ("HUAWEI-PORT-MIB", "hwDslGroupWorkMode"), ("HUAWEI-PORT-MIB", "hwDslGroupVci"), ("HUAWEI-PORT-MIB", "hwDslGroupPvcId"), ("HUAWEI-PORT-MIB", "hwDslGroupIfIndexOfBound"), ("HUAWEI-PORT-MIB", "hwVirtualEthernetIfIndex"), ) )
if mibBuilder.loadTexts: hwDslGroupObjectGroup.setDescription("The dsl group attribute group.")
hwDslGroupImaObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 10)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslGroupImaIfIndex"), ("HUAWEI-PORT-MIB", "hwDslGroupImaReset"), ("HUAWEI-PORT-MIB", "hwDslGroupImaRxMinLinkNum"), ("HUAWEI-PORT-MIB", "hwDslGroupImaIfName"), ("HUAWEI-PORT-MIB", "hwDslGroupImaTxCellRate"), ("HUAWEI-PORT-MIB", "hwDslGroupImaRxActLinkNum"), ("HUAWEI-PORT-MIB", "hwDslGroupImaFeState"), ("HUAWEI-PORT-MIB", "hwDslGroupImaFrameLen"), ("HUAWEI-PORT-MIB", "hwDslGroupImaNeState"), ("HUAWEI-PORT-MIB", "hwDslGroupImaTxActLinkNum"), ("HUAWEI-PORT-MIB", "hwDslGroupImaRxCellRate"), ("HUAWEI-PORT-MIB", "hwDslGroupImaVersion"), ("HUAWEI-PORT-MIB", "hwDslGroupImaTxMinLinkNum"), ) )
if mibBuilder.loadTexts: hwDslGroupImaObjectGroup.setDescription("The dsl group ima attribute group.")
hwDslLinkObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 11)).setObjects(*(("HUAWEI-PORT-MIB", "hwBoundDslGroupIfIndex"), ("HUAWEI-PORT-MIB", "hwDslLinkBoundRowStatus"), ("HUAWEI-PORT-MIB", "hwBoundDslGroupIfName"), ("HUAWEI-PORT-MIB", "hwDslLinkIfIndex"), ("HUAWEI-PORT-MIB", "hwDslLinkIfName"), ) )
if mibBuilder.loadTexts: hwDslLinkObjectGroup.setDescription("The dsl link attribute group.")
hwDslImaTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 20)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslImaLinkLodsResume"), ("HUAWEI-PORT-MIB", "hwDslImaLinkRfi"), ("HUAWEI-PORT-MIB", "hwDslImaLinkReRxUnusable"), ("HUAWEI-PORT-MIB", "hwDslImaLinkReRxUsable"), ("HUAWEI-PORT-MIB", "hwDslImaLinkReTxUsable"), ("HUAWEI-PORT-MIB", "hwDslImaLinkRfiResume"), ("HUAWEI-PORT-MIB", "hwDslImaGroupLEDown"), ("HUAWEI-PORT-MIB", "hwDslImaLinkLif"), ("HUAWEI-PORT-MIB", "hwDslImaLinkReTxUnusable"), ("HUAWEI-PORT-MIB", "hwDslImaGroupREUp"), ("HUAWEI-PORT-MIB", "hwDslImaLinkLods"), ("HUAWEI-PORT-MIB", "hwDslImaLinkLifResume"), ("HUAWEI-PORT-MIB", "hwDslImaGroupREDown"), ("HUAWEI-PORT-MIB", "hwDslImaGroupLEUp"), ) )
if mibBuilder.loadTexts: hwDslImaTrapGroup.setDescription("The dsl Ima Trap group.")
hwDslLinkTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 21)).setObjects(*(("HUAWEI-PORT-MIB", "hwDslLinkSignalLost"), ("HUAWEI-PORT-MIB", "hwDslLinkSignalResume"), ("HUAWEI-PORT-MIB", "hwDslLinkFrameResume"), ("HUAWEI-PORT-MIB", "hwDslLinkFrameLost"), ) )
if mibBuilder.loadTexts: hwDslLinkTrapGroup.setDescription("The dsl Link Trap group.")
hwPortAlarmThresholdObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 22)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortOutputErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorLowThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInputErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInputErrorLowThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInputErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortOutputErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortOutputErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortOutputErrorLowThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorStatistics"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolErrorLowThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInputErrorInterval"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortBIP8SDErrorThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorLowThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhErrorHighThreshold"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcErrorInterval"), ) )
if mibBuilder.loadTexts: hwPortAlarmThresholdObjectGroup.setDescription("The port alarm threshold group.")
hwPortAlarmDownEnableObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 2, 23)).setObjects(*(("HUAWEI-PORT-MIB", "hwPhysicalPortOutputEnabledDown"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSymbolEnabledDown"), ("HUAWEI-PORT-MIB", "hwPhysicalPortInputEnabledDown"), ("HUAWEI-PORT-MIB", "hwPhysicalPortBip8SdEnabledDown"), ("HUAWEI-PORT-MIB", "hwPhysicalPortCrcEnabledDown"), ("HUAWEI-PORT-MIB", "hwPhysicalPortSdhEnabledDown"), ) )
if mibBuilder.loadTexts: hwPortAlarmDownEnableObjectGroup.setDescription("The port alarm down enable group.")

# Compliances

hwPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 157, 11, 1, 1)).setObjects(*(("HUAWEI-PORT-MIB", "hwEthernetObjectGroup"), ("HUAWEI-PORT-MIB", "hwBundleSerialObjectGroup"), ("HUAWEI-PORT-MIB", "hwCposObjectGroup"), ("HUAWEI-PORT-MIB", "hwDs0ChannelBundleObjectGroup"), ("HUAWEI-PORT-MIB", "hwDs3ObjectGroup"), ("HUAWEI-PORT-MIB", "hwDs1ObjectGroup"), ("HUAWEI-PORT-MIB", "hwPortAlarmThresholdObjectGroup"), ("HUAWEI-PORT-MIB", "hwPosObjectGroup"), ("HUAWEI-PORT-MIB", "hwPortAlarmDownEnableObjectGroup"), ("HUAWEI-PORT-MIB", "hwPortNotificationsGroup"), ) )
if mibBuilder.loadTexts: hwPortCompliance.setDescription("The compliance statement for systems supporting\nthe HUAWEI-PORT-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", PYSNMP_MODULE_ID=hwPortMIB)

# Objects
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwPortMIB=hwPortMIB, hwPortMIBObjects=hwPortMIBObjects, hwEthernet=hwEthernet, hwEthernetTable=hwEthernetTable, hwEthernetEntry=hwEthernetEntry, hwEthernetIfIndex=hwEthernetIfIndex, hwEthernetLoopback=hwEthernetLoopback, hwEthernetPortType=hwEthernetPortType, hwEthernetSpeedSet=hwEthernetSpeedSet, hwEthernetDuplex=hwEthernetDuplex, hwEthernetNegotiation=hwEthernetNegotiation, hwEthernetPortTypeOperate=hwEthernetPortTypeOperate, hwEthernetClock=hwEthernetClock, hwEthernetFlagJ0Mode=hwEthernetFlagJ0Mode, hwEthernetFlagJ0Value=hwEthernetFlagJ0Value, hwEthernetFlagJ0Trace=hwEthernetFlagJ0Trace, hwEthernetFlagJ1Mode=hwEthernetFlagJ1Mode, hwEthernetFlagJ1Value=hwEthernetFlagJ1Value, hwEthernetFlagJ1Trace=hwEthernetFlagJ1Trace, hwEthernetFlagC2Value=hwEthernetFlagC2Value, hwEthernetUpHoldTime=hwEthernetUpHoldTime, hwEthernetDownHoldTime=hwEthernetDownHoldTime, hwEthernetSubinterfaceStatisticEnable=hwEthernetSubinterfaceStatisticEnable, hwEthernetFlowControl=hwEthernetFlowControl, hwEthernetOffline=hwEthernetOffline, hwEthernetSetTransferMode=hwEthernetSetTransferMode, hwEthernetJumboframeMaxLength=hwEthernetJumboframeMaxLength, hwEthernetComboType=hwEthernetComboType, hwEthernetPortMode=hwEthernetPortMode, hwEthernetNegotiationMode=hwEthernetNegotiationMode, hwPos=hwPos, hwPosTable=hwPosTable, hwPosEntry=hwPosEntry, hwPosIfIndex=hwPosIfIndex, hwPosLinkProtocol=hwPosLinkProtocol, hwPosFrameFormat=hwPosFrameFormat, hwPosLoopback=hwPosLoopback, hwPosScramble=hwPosScramble, hwPosClock=hwPosClock, hwPosCrcVerifyCode=hwPosCrcVerifyCode, hwPosFlagJ0Mode=hwPosFlagJ0Mode, hwPosFlagJ0Value=hwPosFlagJ0Value, hwPosFlagJ0Trace=hwPosFlagJ0Trace, hwPosFlagJ1Mode=hwPosFlagJ1Mode, hwPosFlagJ1Value=hwPosFlagJ1Value, hwPosFlagJ1Trace=hwPosFlagJ1Trace, hwPosFlagC2Value=hwPosFlagC2Value, hwCpos=hwCpos, hwCposTable=hwCposTable, hwCposEntry=hwCposEntry, hwCposIfIndex=hwCposIfIndex, hwCposClock=hwCposClock, hwCposIfType=hwCposIfType, hwCposFrameFormat=hwCposFrameFormat, hwCposMultiplex=hwCposMultiplex, hwCposLoopback=hwCposLoopback, hwCposFlagJ0Mode=hwCposFlagJ0Mode, hwCposFlagJ0Value=hwCposFlagJ0Value, hwCposFlagJ0Trace=hwCposFlagJ0Trace, hwCposFlagJ1Mode=hwCposFlagJ1Mode, hwCposFlagJ1Value=hwCposFlagJ1Value, hwCposFlagJ1Trace=hwCposFlagJ1Trace, hwCposFlagC2Value=hwCposFlagC2Value, hwCposB1SdAlarmThreshold=hwCposB1SdAlarmThreshold, hwCposB1ExcAlarmThreshold=hwCposB1ExcAlarmThreshold, hwCposB2SdAlarmThreshold=hwCposB2SdAlarmThreshold, hwCposB2ExcAlarmThreshold=hwCposB2ExcAlarmThreshold, hwCposB3SdAlarmThreshold=hwCposB3SdAlarmThreshold, hwCposB3ExcAlarmThreshold=hwCposB3ExcAlarmThreshold, hwCposLpBipSdAlarmThreshold=hwCposLpBipSdAlarmThreshold, hwCposLpBipExcAlarmThreshold=hwCposLpBipExcAlarmThreshold, hwCposHighPathNumber=hwCposHighPathNumber, hwCposLowPathNumber=hwCposLowPathNumber, hwCposMappingMode=hwCposMappingMode, hwPortPhysicalHpIndex=hwPortPhysicalHpIndex, hwPortPhysicalLpIndex=hwPortPhysicalLpIndex, hwCposLpTable=hwCposLpTable, hwCposLpEntry=hwCposLpEntry, hwCposLpIfIndex=hwCposLpIfIndex, hwCposLpId=hwCposLpId, hwCposFlagJ2Mode=hwCposFlagJ2Mode, hwCposFlagJ2Value=hwCposFlagJ2Value, hwCposFlagJ2Trace=hwCposFlagJ2Trace, hwDs0ChannelBundle=hwDs0ChannelBundle, hwDs0ChannelBundleTable=hwDs0ChannelBundleTable, hwDs0ChannelBundleEntry=hwDs0ChannelBundleEntry, hwDs0ChannelBundleParentIfIndex=hwDs0ChannelBundleParentIfIndex, hwDs0ChannelBundleDs1ChannelId=hwDs0ChannelBundleDs1ChannelId, hwDs0ChannelBundleId=hwDs0ChannelBundleId, hwDs0ChannelBundleIfIndex=hwDs0ChannelBundleIfIndex, hwDs0ChannelBundleTimeSlots=hwDs0ChannelBundleTimeSlots, hwDs0ChannelBundleSpeed=hwDs0ChannelBundleSpeed, hwDs0ChannelBundleTimeSlot0=hwDs0ChannelBundleTimeSlot0, hwDs0ChannelBundleIsMasterPW=hwDs0ChannelBundleIsMasterPW, hwDs0ChannelBundleMasterPWStatus=hwDs0ChannelBundleMasterPWStatus, hwDs0ChannelBundlePortName=hwDs0ChannelBundlePortName, hwDs0ChannelBundleRowStatus=hwDs0ChannelBundleRowStatus, hwDs1=hwDs1, hwDs1Table=hwDs1Table, hwDs1Entry=hwDs1Entry, hwDs1ParentIfIndex=hwDs1ParentIfIndex, hwDs1ChannelId=hwDs1ChannelId, hwDs1IfIndex=hwDs1IfIndex, hwDs1ChannelType=hwDs1ChannelType, hwDs1IfType=hwDs1IfType, hwDs1Channelized=hwDs1Channelized, hwDs1CodeType=hwDs1CodeType, hwDs1Clock=hwDs1Clock, hwDs1FrameFormat=hwDs1FrameFormat, hwDs1Cable=hwDs1Cable, hwDs1Loopback=hwDs1Loopback, hwDs1ClockRecoveryDomain=hwDs1ClockRecoveryDomain, hwDs1PWClockDomain=hwDs1PWClockDomain, hwDs1WorkMode=hwDs1WorkMode, hwDs1EsAlarmTriggerThreshold=hwDs1EsAlarmTriggerThreshold, hwDs1EsAlarmResumeThreshold=hwDs1EsAlarmResumeThreshold, hwDs1RowStatus=hwDs1RowStatus, hwDs1Lbo=hwDs1Lbo, hwDs1CableLength=hwDs1CableLength, hwDs3=hwDs3, hwDs3Table=hwDs3Table, hwDs3Entry=hwDs3Entry, hwDs3ParentIfIndex=hwDs3ParentIfIndex, hwDs3ChannelId=hwDs3ChannelId, hwDs3IfIndex=hwDs3IfIndex, hwDs3ChannelType=hwDs3ChannelType)
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwDs3IfType=hwDs3IfType, hwDs3Channelized=hwDs3Channelized, hwDs3Clock=hwDs3Clock, hwDs3FrameFormat=hwDs3FrameFormat, hwDs3Scramble=hwDs3Scramble, hwDs3Cable=hwDs3Cable, hwDs3NationalBit=hwDs3NationalBit, hwDs3Loopback=hwDs3Loopback, hwDs3CreateSerial=hwDs3CreateSerial, hwDs3RowStatus=hwDs3RowStatus, hwBundleSerial=hwBundleSerial, hwBundleSerialTable=hwBundleSerialTable, hwBundleSerialEntry=hwBundleSerialEntry, hwBundleSerialIfIndex=hwBundleSerialIfIndex, hwBundleSerialLinkProtocol=hwBundleSerialLinkProtocol, hwBundleSerialTimerHold=hwBundleSerialTimerHold, hwBundleSerialLoopback=hwBundleSerialLoopback, hwBundleSerialCrcVerifyCode=hwBundleSerialCrcVerifyCode, hwPhysicalPort=hwPhysicalPort, hwPhysicalPortTable=hwPhysicalPortTable, hwPhysicalPortEntry=hwPhysicalPortEntry, hwPhysicalPortIfIndex=hwPhysicalPortIfIndex, hwPhysicalPortDelayTime=hwPhysicalPortDelayTime, hwPhysicalPortDelayRemainTime=hwPhysicalPortDelayRemainTime, hwPhysicalPortName=hwPhysicalPortName, hwPhysicalPortInChassis=hwPhysicalPortInChassis, hwPhysicalPortInSlot=hwPhysicalPortInSlot, hwPhysicalPortInCard=hwPhysicalPortInCard, hwPhysicalPortInPort=hwPhysicalPortInPort, hwPhysicalAutoShutLaserEnable=hwPhysicalAutoShutLaserEnable, hwPhysicalAutoShutLaserOpenInterval=hwPhysicalAutoShutLaserOpenInterval, hwPhysicalAutoShutLaserCloseInterval=hwPhysicalAutoShutLaserCloseInterval, hwPhysicalAutoShutLaserLongOpenInterval=hwPhysicalAutoShutLaserLongOpenInterval, hwPhysicalLoopbackType=hwPhysicalLoopbackType, hwPhysicalShutLaser=hwPhysicalShutLaser, hwPhysicalLaserStatus=hwPhysicalLaserStatus, hwPhysicalPortHoldUp=hwPhysicalPortHoldUp, hwPhysicalPortAlarmInverseEnable=hwPhysicalPortAlarmInverseEnable, hwSDHRsMsPerfCurrentTable=hwSDHRsMsPerfCurrentTable, hwSDHRsMsPerfCurrentEntry=hwSDHRsMsPerfCurrentEntry, hwSDHRsMsPerfCurrentIfIndex=hwSDHRsMsPerfCurrentIfIndex, hwSDHRsMsPerfCurrentDataIndex=hwSDHRsMsPerfCurrentDataIndex, hwSDHRsPerfCurrentBBE=hwSDHRsPerfCurrentBBE, hwSDHRsPerfCurrentES=hwSDHRsPerfCurrentES, hwSDHRsPerfCurrentSES=hwSDHRsPerfCurrentSES, hwSDHRsPerfCurrentUAS=hwSDHRsPerfCurrentUAS, hwSDHMsPerfCurrentBBE=hwSDHMsPerfCurrentBBE, hwSDHMsPerfCurrentES=hwSDHMsPerfCurrentES, hwSDHMsPerfCurrentSES=hwSDHMsPerfCurrentSES, hwSDHMsPerfCurrentUAS=hwSDHMsPerfCurrentUAS, hwSDHMsPerfCurrentFEBBE=hwSDHMsPerfCurrentFEBBE, hwSDHMsPerfCurrentFEES=hwSDHMsPerfCurrentFEES, hwSDHMsPerfCurrentFESES=hwSDHMsPerfCurrentFESES, hwSDHMsPerfCurrentFEUAS=hwSDHMsPerfCurrentFEUAS, hwSDHHpPerfCurrentTable=hwSDHHpPerfCurrentTable, hwSDHHpPerfCurrentEntry=hwSDHHpPerfCurrentEntry, hwSDHHpPerfCurrentIfIndex=hwSDHHpPerfCurrentIfIndex, hwSDHHpPerfCurrentHpIndex=hwSDHHpPerfCurrentHpIndex, hwSDHHpPerfCurrentDataIndex=hwSDHHpPerfCurrentDataIndex, hwSDHHpPerfCurrentBBE=hwSDHHpPerfCurrentBBE, hwSDHHpPerfCurrentES=hwSDHHpPerfCurrentES, hwSDHHpPerfCurrentSES=hwSDHHpPerfCurrentSES, hwSDHHpPerfCurrentUAS=hwSDHHpPerfCurrentUAS, hwSDHHpPerfCurrentFEBBE=hwSDHHpPerfCurrentFEBBE, hwSDHHpPerfCurrentFEES=hwSDHHpPerfCurrentFEES, hwSDHHpPerfCurrentFESES=hwSDHHpPerfCurrentFESES, hwSDHHpPerfCurrentFEUAS=hwSDHHpPerfCurrentFEUAS, hwSDHLpPerfCurrentTable=hwSDHLpPerfCurrentTable, hwSDHLpPerfCurrentEntry=hwSDHLpPerfCurrentEntry, hwSDHLpPerfCurrentIfIndex=hwSDHLpPerfCurrentIfIndex, hwSDHLpPerfCurrentHpIndex=hwSDHLpPerfCurrentHpIndex, hwSDHLpPerfCurrentLpIndex=hwSDHLpPerfCurrentLpIndex, hwSDHLpPerfCurrentDataIndex=hwSDHLpPerfCurrentDataIndex, hwSDHLpPerfCurrentBBE=hwSDHLpPerfCurrentBBE, hwSDHLpPerfCurrentES=hwSDHLpPerfCurrentES, hwSDHLpPerfCurrentSES=hwSDHLpPerfCurrentSES, hwSDHLpPerfCurrentUAS=hwSDHLpPerfCurrentUAS, hwSDHLpPerfCurrentFEBBE=hwSDHLpPerfCurrentFEBBE, hwSDHLpPerfCurrentFEES=hwSDHLpPerfCurrentFEES, hwSDHLpPerfCurrentFESES=hwSDHLpPerfCurrentFESES, hwSDHLpPerfCurrentFEUAS=hwSDHLpPerfCurrentFEUAS, hwPDHPerfCurrentTable=hwPDHPerfCurrentTable, hwPDHPerfCurrentEntry=hwPDHPerfCurrentEntry, hwPDHPerfCurrentIfIndex=hwPDHPerfCurrentIfIndex, hwPDHPerfCurrentDataIndex=hwPDHPerfCurrentDataIndex, hwPDHPerfCurrentBBE=hwPDHPerfCurrentBBE, hwPDHPerfCurrentES=hwPDHPerfCurrentES, hwPDHPerfCurrentSES=hwPDHPerfCurrentSES, hwPDHPerfCurrentUAS=hwPDHPerfCurrentUAS, hwEthPortStatTable=hwEthPortStatTable, hwEthPortStatEntry=hwEthPortStatEntry, hwEthPortStatIfIndex=hwEthPortStatIfIndex, hwEthPortStatBadBytes=hwEthPortStatBadBytes, hwPhysicalPortGlobleCfg=hwPhysicalPortGlobleCfg, hwLoopBackAutoClearEnable=hwLoopBackAutoClearEnable, hwLoopBackAutoClearPeriod=hwLoopBackAutoClearPeriod, hwPortAlarmInverseEnable=hwPortAlarmInverseEnable, hwDslGroup=hwDslGroup, hwDslGroupTable=hwDslGroupTable, hwDslGroupEntry=hwDslGroupEntry, hwDslGroupIfIndex=hwDslGroupIfIndex, hwDslGroupWorkMode=hwDslGroupWorkMode, hwDslGroupBisState=hwDslGroupBisState, hwDslGroupEncapeMode=hwDslGroupEncapeMode, hwDslGroupEnable=hwDslGroupEnable, hwDslGroupRowStatus=hwDslGroupRowStatus, hwDslGroupBoundVeTable=hwDslGroupBoundVeTable, hwDslGroupBoundVeEntry=hwDslGroupBoundVeEntry, hwDslGroupIfIndexOfBound=hwDslGroupIfIndexOfBound, hwVirtualEthernetIfIndex=hwVirtualEthernetIfIndex, hwDslGroupVpi=hwDslGroupVpi, hwDslGroupVci=hwDslGroupVci, hwDslGroupPvcId=hwDslGroupPvcId, hwBoundVeRowStatus=hwBoundVeRowStatus, hwDslGroupBindVeTable=hwDslGroupBindVeTable, hwDslGroupBindVeEntry=hwDslGroupBindVeEntry, hwDslGroupInterfaceIndex=hwDslGroupInterfaceIndex, hwVirtualEthernetInterfaceIndex=hwVirtualEthernetInterfaceIndex, hwBindVeRowStatus=hwBindVeRowStatus, hwDslGroupIma=hwDslGroupIma, hwDslGroupImaTable=hwDslGroupImaTable, hwDslGroupImaEntry=hwDslGroupImaEntry, hwDslGroupImaIfIndex=hwDslGroupImaIfIndex, hwDslGroupImaVersion=hwDslGroupImaVersion, hwDslGroupImaFrameLen=hwDslGroupImaFrameLen, hwDslGroupImaReset=hwDslGroupImaReset, hwDslGroupImaTxMinLinkNum=hwDslGroupImaTxMinLinkNum)
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwDslGroupImaRxMinLinkNum=hwDslGroupImaRxMinLinkNum, hwDslGroupImaNeState=hwDslGroupImaNeState, hwDslGroupImaFeState=hwDslGroupImaFeState, hwDslGroupImaTxCellRate=hwDslGroupImaTxCellRate, hwDslGroupImaRxCellRate=hwDslGroupImaRxCellRate, hwDslGroupImaTxActLinkNum=hwDslGroupImaTxActLinkNum, hwDslGroupImaRxActLinkNum=hwDslGroupImaRxActLinkNum, hwDslGroupImaIfName=hwDslGroupImaIfName, hwDslLink=hwDslLink, hwDslLinkTable=hwDslLinkTable, hwDslLinkEntry=hwDslLinkEntry, hwBoundDslGroupIfIndex=hwBoundDslGroupIfIndex, hwDslLinkIfIndex=hwDslLinkIfIndex, hwDslLinkIfName=hwDslLinkIfName, hwBoundDslGroupIfName=hwBoundDslGroupIfName, hwDslLinkBoundRowStatus=hwDslLinkBoundRowStatus, hwPWAlarm=hwPWAlarm, hwPWAlarmTable=hwPWAlarmTable, hwPWAlarmEntry=hwPWAlarmEntry, hwPWAlarmIfIndex=hwPWAlarmIfIndex, hwPWCesVcID=hwPWCesVcID, hwPWCesVcType=hwPWCesVcType, hwPeerIpAddr=hwPeerIpAddr, hwAlarmStatus=hwAlarmStatus, hwPWAlarmRMLEnableStatus=hwPWAlarmRMLEnableStatus, hwLosAlarmTriggerThreshold=hwLosAlarmTriggerThreshold, hwLosAlarmResumeThreshold=hwLosAlarmResumeThreshold, hwPWPortName=hwPWPortName, hwLosPktExcTriggerThreshold=hwLosPktExcTriggerThreshold, hwLosPktExcResumeThreshold=hwLosPktExcResumeThreshold, hwMisorderPktExcTriggerThreshold=hwMisorderPktExcTriggerThreshold, hwMisorderPktExcResumeThreshold=hwMisorderPktExcResumeThreshold, hwStrayPktExcTriggerThreshold=hwStrayPktExcTriggerThreshold, hwStrayPktExcResumeThreshold=hwStrayPktExcResumeThreshold, hwMalPktExcTriggerThreshold=hwMalPktExcTriggerThreshold, hwMalPktExcResumeThreshold=hwMalPktExcResumeThreshold, hwJtrUdrExcTriggerThreshold=hwJtrUdrExcTriggerThreshold, hwJtrUdrExcResumeThreshold=hwJtrUdrExcResumeThreshold, hwJtrOvrExcTriggerThreshold=hwJtrOvrExcTriggerThreshold, hwJtrOvrExcResumeThreshold=hwJtrOvrExcResumeThreshold, hwAtmPWAlarmTable=hwAtmPWAlarmTable, hwAtmPWAlarmEntry=hwAtmPWAlarmEntry, hwAtmPWAlarmIfIndex=hwAtmPWAlarmIfIndex, hwAtmVcID=hwAtmVcID, hwAtmVcType=hwAtmVcType, hwAtmPeerIpAddr=hwAtmPeerIpAddr, hwAtmPWPortName=hwAtmPWPortName, hwAtmLosPktExcTriggerThreshold=hwAtmLosPktExcTriggerThreshold, hwAtmLosPktExcResumeThreshold=hwAtmLosPktExcResumeThreshold, hwAtmMisorderPktExcTriggerThreshold=hwAtmMisorderPktExcTriggerThreshold, hwAtmMisorderPktExcResumeThreshold=hwAtmMisorderPktExcResumeThreshold, hwAtmUnknownCellExcTriggerThreshold=hwAtmUnknownCellExcTriggerThreshold, hwAtmUnknownCellExcResumeThreshold=hwAtmUnknownCellExcResumeThreshold, hwSNMPTrapEn=hwSNMPTrapEn, hwSNMPTrapEnTable=hwSNMPTrapEnTable, hwSNMPTrapEnEntry=hwSNMPTrapEnEntry, hwSNMPTrapEnIfIndex=hwSNMPTrapEnIfIndex, hwCesPWLopsEn=hwCesPWLopsEn, hwCesPWRemoteLosPktEn=hwCesPWRemoteLosPktEn, hwCesPWOppositeRAIEn=hwCesPWOppositeRAIEn, hwCesPWOppositeAcfaultEn=hwCesPWOppositeAcfaultEn, hwCesPWLosPktEn=hwCesPWLosPktEn, hwCesPWMisorderPktEn=hwCesPWMisorderPktEn, hwCesPWStrayPktEn=hwCesPWStrayPktEn, hwCesPWMalPktEn=hwCesPWMalPktEn, hwCesPWJtrUnrEn=hwCesPWJtrUnrEn, hwCesPWJtrOvrEn=hwCesPWJtrOvrEn, hwCesPWAllEn=hwCesPWAllEn, hwPhysicalPortLosAlarmEn=hwPhysicalPortLosAlarmEn, hwPhysicalPortLofAlarmEn=hwPhysicalPortLofAlarmEn, hwRsOofAlarmEn=hwRsOofAlarmEn, hwRsB1ExcAlarmEn=hwRsB1ExcAlarmEn, hwRsB1SdAlarmEn=hwRsB1SdAlarmEn, hwRsJ0TimAlarmEn=hwRsJ0TimAlarmEn, hwMsRdiAlarmEn=hwMsRdiAlarmEn, hwMsB2ExcAlarmEn=hwMsB2ExcAlarmEn, hwMsAuLopAlarmEn=hwMsAuLopAlarmEn, hwMsAisAlarmEn=hwMsAisAlarmEn, hwMsB2SdAlarmEn=hwMsB2SdAlarmEn, hwHpJ1TimAlarmEn=hwHpJ1TimAlarmEn, hwHpUneqAlarmEn=hwHpUneqAlarmEn, hwHpRdiAlarmEn=hwHpRdiAlarmEn, hwHpB3ExcAlarmEn=hwHpB3ExcAlarmEn, hwHpPlmAlarmEn=hwHpPlmAlarmEn, hwHpB3SdAlarmEn=hwHpB3SdAlarmEn, hwHpAuAisAlarmEn=hwHpAuAisAlarmEn, hwLpTuLopAlarmEn=hwLpTuLopAlarmEn, hwHpTuLomAlarmEn=hwHpTuLomAlarmEn, hwLpTimAlarmEn=hwLpTimAlarmEn, hwLpUneqAlarmEn=hwLpUneqAlarmEn, hwLpRdiAlarmEn=hwLpRdiAlarmEn, hwLpBipExcAlarmEn=hwLpBipExcAlarmEn, hwLpBipSdAlarmEn=hwLpBipSdAlarmEn, hwLpPlmAlarmEn=hwLpPlmAlarmEn, hwLpTuAisAlarmEn=hwLpTuAisAlarmEn, hwDs1EsExcAlarmEn=hwDs1EsExcAlarmEn, hwDs1RmfaAlarmEn=hwDs1RmfaAlarmEn, hwDs1LmfaAlarmEn=hwDs1LmfaAlarmEn, hwDs1AisAlarmEn=hwDs1AisAlarmEn, hwDs1RdiAlarmEn=hwDs1RdiAlarmEn, hwRsLocAlarmEn=hwRsLocAlarmEn, hwLpRfiAlarmEn=hwLpRfiAlarmEn, hwLpV5VcaisAlarmEn=hwLpV5VcaisAlarmEn, hwVc12oofAlarmEn=hwVc12oofAlarmEn, hwVc12AlmE1RaiAlarmEn=hwVc12AlmE1RaiAlarmEn, hwVc12LfaAlarmEn=hwVc12LfaAlarmEn, hwVc12UpE1AisAlarmEn=hwVc12UpE1AisAlarmEn, hwVc12DownE1AisAlarmEn=hwVc12DownE1AisAlarmEn, hwDs1DownE1AisAlarmEn=hwDs1DownE1AisAlarmEn, hwMsLpsUniBiMAlarmEn=hwMsLpsUniBiMAlarmEn, hwMsK1K2MAlarmEn=hwMsK1K2MAlarmEn, hwMsK2MAlarmEn=hwMsK2MAlarmEn, hwVc12LmfaAlarmEn=hwVc12LmfaAlarmEn, hwSDHAllEn=hwSDHAllEn, hwLaserShutAlarmEn=hwLaserShutAlarmEn, hwLaserAutoShutAlarmEn=hwLaserAutoShutAlarmEn, hwLaserAllEn=hwLaserAllEn, hwLoopbackAlarmEn=hwLoopbackAlarmEn, hwChannelLoopbackAlarmEn=hwChannelLoopbackAlarmEn, hwLoopbackAllEn=hwLoopbackAllEn, hwAtmOcdAlarmEn=hwAtmOcdAlarmEn, hwAtmLcdAlarmEn=hwAtmLcdAlarmEn, hwAtmUhcsAlarmEn=hwAtmUhcsAlarmEn, hwAtmChcsAlarmEn=hwAtmChcsAlarmEn, hwAtmPWLosPktEn=hwAtmPWLosPktEn, hwAtmPWMisorderPktEn=hwAtmPWMisorderPktEn, hwAtmPWUnknownCellEn=hwAtmPWUnknownCellEn)
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwAtmAllEn=hwAtmAllEn, hwPortAlarmThreshold=hwPortAlarmThreshold, hwPortAlarmThresholdTable=hwPortAlarmThresholdTable, hwPortAlarmThresholdEntry=hwPortAlarmThresholdEntry, hwPhysicalPortThrIfIndex=hwPhysicalPortThrIfIndex, hwPhysicalPortThrName=hwPhysicalPortThrName, hwPhysicalPortCrcErrorStatistics=hwPhysicalPortCrcErrorStatistics, hwPhysicalPortCrcErrorHighThreshold=hwPhysicalPortCrcErrorHighThreshold, hwPhysicalPortCrcErrorLowThreshold=hwPhysicalPortCrcErrorLowThreshold, hwPhysicalPortCrcErrorInterval=hwPhysicalPortCrcErrorInterval, hwPhysicalPortSymbolErrorStatistics=hwPhysicalPortSymbolErrorStatistics, hwPhysicalPortSymbolErrorHighThreshold=hwPhysicalPortSymbolErrorHighThreshold, hwPhysicalPortSymbolErrorLowThreshold=hwPhysicalPortSymbolErrorLowThreshold, hwPhysicalPortSymbolErrorInterval=hwPhysicalPortSymbolErrorInterval, hwPhysicalPortInputErrorStatistics=hwPhysicalPortInputErrorStatistics, hwPhysicalPortInputErrorHighThreshold=hwPhysicalPortInputErrorHighThreshold, hwPhysicalPortInputErrorLowThreshold=hwPhysicalPortInputErrorLowThreshold, hwPhysicalPortInputErrorInterval=hwPhysicalPortInputErrorInterval, hwPhysicalPortOutputErrorStatistics=hwPhysicalPortOutputErrorStatistics, hwPhysicalPortOutputErrorHighThreshold=hwPhysicalPortOutputErrorHighThreshold, hwPhysicalPortOutputErrorLowThreshold=hwPhysicalPortOutputErrorLowThreshold, hwPhysicalPortOutputErrorInterval=hwPhysicalPortOutputErrorInterval, hwPhysicalPortSdhErrorStatistics=hwPhysicalPortSdhErrorStatistics, hwPhysicalPortSdhErrorHighThreshold=hwPhysicalPortSdhErrorHighThreshold, hwPhysicalPortSdhErrorLowThreshold=hwPhysicalPortSdhErrorLowThreshold, hwPhysicalPortSdhErrorInterval=hwPhysicalPortSdhErrorInterval, hwPhysicalPortBIP8SDErrorThreshold=hwPhysicalPortBIP8SDErrorThreshold, hwPhysicalPortCrcPerAlarmThresholdCoefficient=hwPhysicalPortCrcPerAlarmThresholdCoefficient, hwPhysicalPortCrcPerAlarmThresholdPower=hwPhysicalPortCrcPerAlarmThresholdPower, hwPhysicalPortCrcPerResumeThresholdCoefficient=hwPhysicalPortCrcPerResumeThresholdCoefficient, hwPhysicalPortCrcPerResumeThresholdPower=hwPhysicalPortCrcPerResumeThresholdPower, hwPhysicalPortCrcPerTriggerLsp=hwPhysicalPortCrcPerTriggerLsp, hwPhysicalPortCrcPerCurrentValueString=hwPhysicalPortCrcPerCurrentValueString, hwPhysicalPortCrcPerAlarmThresholdString=hwPhysicalPortCrcPerAlarmThresholdString, hwPhysicalPortCrcPerResumeThresholdString=hwPhysicalPortCrcPerResumeThresholdString, hwPortAlarmDownEnable=hwPortAlarmDownEnable, hwPortAlarmDownEnableTable=hwPortAlarmDownEnableTable, hwPortAlarmDownEnableEntry=hwPortAlarmDownEnableEntry, hwPhysicalPortDownIfIndex=hwPhysicalPortDownIfIndex, hwPhysicalPortDownName=hwPhysicalPortDownName, hwPhysicalPortCrcEnabledDown=hwPhysicalPortCrcEnabledDown, hwPhysicalPortSymbolEnabledDown=hwPhysicalPortSymbolEnabledDown, hwPhysicalPortInputEnabledDown=hwPhysicalPortInputEnabledDown, hwPhysicalPortOutputEnabledDown=hwPhysicalPortOutputEnabledDown, hwPhysicalPortSdhEnabledDown=hwPhysicalPortSdhEnabledDown, hwPhysicalPortBip8SdEnabledDown=hwPhysicalPortBip8SdEnabledDown, hwPortNotifications=hwPortNotifications, hwDslImaGroupTraps=hwDslImaGroupTraps, hwDslImaLinkTraps=hwDslImaLinkTraps, hwDslLinkTraps=hwDslLinkTraps, hwPortAlarmTraps=hwPortAlarmTraps, hwPortConformance=hwPortConformance, hwPortCompliances=hwPortCompliances, hwPortGroups=hwPortGroups, hwPortAlarmTrapGroup=hwPortAlarmTrapGroup)

# Notifications
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwPortACRMasterPWChange=hwPortACRMasterPWChange, hwDslImaGroupLEDown=hwDslImaGroupLEDown, hwDslImaGroupLEUp=hwDslImaGroupLEUp, hwDslImaGroupREDown=hwDslImaGroupREDown, hwDslImaGroupREUp=hwDslImaGroupREUp, hwDslImaLinkLif=hwDslImaLinkLif, hwDslImaLinkLifResume=hwDslImaLinkLifResume, hwDslImaLinkLods=hwDslImaLinkLods, hwDslImaLinkLodsResume=hwDslImaLinkLodsResume, hwDslImaLinkRfi=hwDslImaLinkRfi, hwDslImaLinkRfiResume=hwDslImaLinkRfiResume, hwDslImaLinkReTxUnusable=hwDslImaLinkReTxUnusable, hwDslImaLinkReTxUsable=hwDslImaLinkReTxUsable, hwDslImaLinkReRxUnusable=hwDslImaLinkReRxUnusable, hwDslImaLinkReRxUsable=hwDslImaLinkReRxUsable, hwDslLinkFrameLost=hwDslLinkFrameLost, hwDslLinkFrameResume=hwDslLinkFrameResume, hwDslLinkSignalLost=hwDslLinkSignalLost, hwDslLinkSignalResume=hwDslLinkSignalResume, hwCesPwRemoteLosPktAlarm=hwCesPwRemoteLosPktAlarm, hwCesPwRemoteLosPktAlarmResume=hwCesPwRemoteLosPktAlarmResume, hwCesPwOppositeRai=hwCesPwOppositeRai, hwCesPwOppositeRaiResume=hwCesPwOppositeRaiResume, hwLosAlarm=hwLosAlarm, hwLosAlarmResume=hwLosAlarmResume, hwLofAlarm=hwLofAlarm, hwLofAlarmResume=hwLofAlarmResume, hwOofAlarm=hwOofAlarm, hwOofAlarmResume=hwOofAlarmResume, hwB1TcaAlarm=hwB1TcaAlarm, hwB1TcaAlarmResume=hwB1TcaAlarmResume, hwB2TcaAlarm=hwB2TcaAlarm, hwB2TcaAlarmResume=hwB2TcaAlarmResume, hwJ0TimAlarm=hwJ0TimAlarm, hwJ0TimAlarmResume=hwJ0TimAlarmResume, hwLrdiAlarm=hwLrdiAlarm, hwLrdiAlarmResume=hwLrdiAlarmResume, hwSfbereAlarm=hwSfbereAlarm, hwSfbereAlarmResume=hwSfbereAlarmResume, hwAuLopAlarm=hwAuLopAlarm, hwAuLopAlarmResume=hwAuLopAlarmResume, hwLaisAlarm=hwLaisAlarm, hwLaisAlarmResume=hwLaisAlarmResume, hwSdbereAlarm=hwSdbereAlarm, hwSdbereAlarmResume=hwSdbereAlarmResume, hwPtimAlarm=hwPtimAlarm, hwPtimAlarmResume=hwPtimAlarmResume, hwPuneqAlarm=hwPuneqAlarm, hwPuneqAlarmResume=hwPuneqAlarmResume, hwPrdiAlarm=hwPrdiAlarm, hwPrdiAlarmResume=hwPrdiAlarmResume, hwB3TcaAlarm=hwB3TcaAlarm, hwB3TcaAlarmResume=hwB3TcaAlarmResume, hwPplmAlarm=hwPplmAlarm, hwPplmAlarmResume=hwPplmAlarmResume, hwPaisAlarm=hwPaisAlarm, hwPaisAlarmResume=hwPaisAlarmResume, hwAuAisAlarm=hwAuAisAlarm, hwAuAisAlarmResume=hwAuAisAlarmResume, hwVlopAlarm=hwVlopAlarm, hwVlopAlarmResume=hwVlopAlarmResume, hwLomAlarm=hwLomAlarm, hwLomAlarmResume=hwLomAlarmResume, hwLpTimVc12Alarm=hwLpTimVc12Alarm, hwLpTimVc12AlarmResume=hwLpTimVc12AlarmResume, hwLpUneqVc12Alarm=hwLpUneqVc12Alarm, hwLpUneqVc12AlarmResume=hwLpUneqVc12AlarmResume, hwVrdiAlarm=hwVrdiAlarm, hwVrdiAlarmResume=hwVrdiAlarmResume, hwBip2TcaAlarm=hwBip2TcaAlarm, hwBip2TcaAlarmResume=hwBip2TcaAlarmResume, hwLpSlmVc12Alarm=hwLpSlmVc12Alarm, hwLpSlmVc12AlarmResume=hwLpSlmVc12AlarmResume, hwTuAisVc12Alarm=hwTuAisVc12Alarm, hwTuAisVc12AlarmResume=hwTuAisVc12AlarmResume, hwE1EsTcaAlarm=hwE1EsTcaAlarm, hwE1EsTcaAlarmResume=hwE1EsTcaAlarmResume, hwE1LmfaAlarm=hwE1LmfaAlarm, hwE1LmfaAlarmResume=hwE1LmfaAlarmResume, hwE1UpE1AisAlarm=hwE1UpE1AisAlarm, hwE1UpE1AisAlarmResume=hwE1UpE1AisAlarmResume, hwE1AlmE1RaiAlarm=hwE1AlmE1RaiAlarm, hwE1AlmE1RaiAlarmResume=hwE1AlmE1RaiAlarmResume, hwCesPwOppositeAcFault=hwCesPwOppositeAcFault, hwCesPwOppositeAcFaultResume=hwCesPwOppositeAcFaultResume, hwCesLosPktExcAlarm=hwCesLosPktExcAlarm, hwCesLosPktExcAlarmResume=hwCesLosPktExcAlarmResume, hwCesMisorderPktExcAlarm=hwCesMisorderPktExcAlarm, hwCesMisorderPktExcAlarmResume=hwCesMisorderPktExcAlarmResume, hwCesStrayPktExcAlarm=hwCesStrayPktExcAlarm, hwCesStrayPktExcAlarmResume=hwCesStrayPktExcAlarmResume, hwCesMalPktExcAlarm=hwCesMalPktExcAlarm, hwCesMalPktExcAlarmResume=hwCesMalPktExcAlarmResume, hwCesJtrUdrExcAlarm=hwCesJtrUdrExcAlarm, hwCesJtrUdrExcAlarmResume=hwCesJtrUdrExcAlarmResume, hwCesJtrOvrExcAlarm=hwCesJtrOvrExcAlarm, hwCesJtrOvrExcAlarmResume=hwCesJtrOvrExcAlarmResume, hwRroolAlarm=hwRroolAlarm, hwRroolAlarmResume=hwRroolAlarmResume, hwVrfiAlarm=hwVrfiAlarm, hwVrfiAlarmResume=hwVrfiAlarmResume, hwV5VcaisAlarm=hwV5VcaisAlarm, hwV5VcaisAlarmResume=hwV5VcaisAlarmResume, hwCposE1AlmE1RaiAlarm=hwCposE1AlmE1RaiAlarm, hwCposE1AlmE1RaiAlarmResume=hwCposE1AlmE1RaiAlarmResume, hwCposE1LfaAlarm=hwCposE1LfaAlarm, hwCposE1LfaAlarmResume=hwCposE1LfaAlarmResume, hwCposE1UpE1AisAlarm=hwCposE1UpE1AisAlarm, hwCposE1UpE1AisAlarmResume=hwCposE1UpE1AisAlarmResume, hwCposE1DownE1AisAlarm=hwCposE1DownE1AisAlarm, hwCposE1DownE1AisAlarmResume=hwCposE1DownE1AisAlarmResume, hwE1DownE1AisAlarm=hwE1DownE1AisAlarm, hwE1DownE1AisAlarmResume=hwE1DownE1AisAlarmResume, hwCposE1LmfaAlarm=hwCposE1LmfaAlarm, hwCposE1LmfaAlarmResume=hwCposE1LmfaAlarmResume, hwLaserShutAlarm=hwLaserShutAlarm, hwLaserShutAlarmResume=hwLaserShutAlarmResume, hwLaserAutoShutAlarm=hwLaserAutoShutAlarm, hwLaserAutoShutAlarmResume=hwLaserAutoShutAlarmResume, hwLoopbackAlarm=hwLoopbackAlarm, hwLoopbackAlarmResume=hwLoopbackAlarmResume, hwOcdAlarm=hwOcdAlarm, hwOcdAlarmResume=hwOcdAlarmResume, hwLcdAlarm=hwLcdAlarm, hwLcdAlarmResume=hwLcdAlarmResume, hwUhcsAlarm=hwUhcsAlarm)
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwUhcsAlarmResume=hwUhcsAlarmResume, hwChcsAlarm=hwChcsAlarm, hwChcsAlarmResume=hwChcsAlarmResume, hwChannelLoopbackAlarm=hwChannelLoopbackAlarm, hwChannelLoopbackAlarmResume=hwChannelLoopbackAlarmResume, hwCesLopsAlarm=hwCesLopsAlarm, hwCesLopsAlarmResume=hwCesLopsAlarmResume, hwAtmPwLosPktExcAlarm=hwAtmPwLosPktExcAlarm, hwAtmPwLosPktExcAlarmResume=hwAtmPwLosPktExcAlarmResume, hwAtmPwMisorderPktExcAlarm=hwAtmPwMisorderPktExcAlarm, hwAtmPwMisorderPktExcAlarmResume=hwAtmPwMisorderPktExcAlarmResume, hwAtmPwUnknownCellExcAlarm=hwAtmPwUnknownCellExcAlarm, hwAtmPwUnknownCellExcAlarmResume=hwAtmPwUnknownCellExcAlarmResume, hwInputErrorAlarm=hwInputErrorAlarm, hwInputErrorAlarmResume=hwInputErrorAlarmResume, hwOutputErrorAlarm=hwOutputErrorAlarm, hwOutputErrorAlarmResume=hwOutputErrorAlarmResume, hwPhysicalPortCrcError=hwPhysicalPortCrcError, hwPhysicalPortCrcErrorResume=hwPhysicalPortCrcErrorResume, hwPhysicalPortSymbolError=hwPhysicalPortSymbolError, hwPhysicalPortSymbolErrorResume=hwPhysicalPortSymbolErrorResume, hwPhysicalPortSdhError=hwPhysicalPortSdhError, hwPhysicalPortSdhErrorResume=hwPhysicalPortSdhErrorResume, hwPhysicalPortBip8SdError=hwPhysicalPortBip8SdError, hwPhysicalPortBip8SdErrorResume=hwPhysicalPortBip8SdErrorResume, hwPhysicalPortCrcPacketErrorRatio=hwPhysicalPortCrcPacketErrorRatio, hwPhysicalPortCrcPacketErrorRatioResume=hwPhysicalPortCrcPacketErrorRatioResume, hwLoopBackAutoClearNotice=hwLoopBackAutoClearNotice, hwChannelLoopBackAutoClearNotice=hwChannelLoopBackAutoClearNotice, hwHpJ1TiuAlarm=hwHpJ1TiuAlarm, hwHpJ1TiuAlarmResume=hwHpJ1TiuAlarmResume, hwPortAlarmInverseAutoRecover=hwPortAlarmInverseAutoRecover)

# Groups
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwEthernetObjectGroup=hwEthernetObjectGroup, hwPosObjectGroup=hwPosObjectGroup, hwCposObjectGroup=hwCposObjectGroup, hwDs0ChannelBundleObjectGroup=hwDs0ChannelBundleObjectGroup, hwDs1ObjectGroup=hwDs1ObjectGroup, hwDs3ObjectGroup=hwDs3ObjectGroup, hwBundleSerialObjectGroup=hwBundleSerialObjectGroup, hwPortNotificationsGroup=hwPortNotificationsGroup, hwDslGroupObjectGroup=hwDslGroupObjectGroup, hwDslGroupImaObjectGroup=hwDslGroupImaObjectGroup, hwDslLinkObjectGroup=hwDslLinkObjectGroup, hwDslImaTrapGroup=hwDslImaTrapGroup, hwDslLinkTrapGroup=hwDslLinkTrapGroup, hwPortAlarmThresholdObjectGroup=hwPortAlarmThresholdObjectGroup, hwPortAlarmDownEnableObjectGroup=hwPortAlarmDownEnableObjectGroup)

# Compliances
mibBuilder.exportSymbols("HUAWEI-PORT-MIB", hwPortCompliance=hwPortCompliance)
